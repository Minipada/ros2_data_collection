# This config uses industrial_ci (https://github.com/ros-industrial/industrial_ci.git).
# For troubleshooting, see readme (https://github.com/ros-industrial/industrial_ci/blob/master/README.rst)

name: CI

on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - humble

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  default:
    strategy:
      fail-fast: false
      matrix:
        env:
          - IMAGE: humble-ci
            CCOV: true
            ROS_DISTRO: humble
          - IMAGE: humble-ci-testing
            ROS_DISTRO: humble
            CLANG_TIDY: pedantic
            # Silent gmock/gtest warnings: https://github.com/ament/googletest/pull/21
            AFTER_BUILD_UPSTREAM_WORKSPACE: |
              git clone --quiet --branch clalancette/update-to-gtest-1.11 https://github.com/ament/googletest "${BASEDIR}/upstream_ws/src/googletest"
              builder_run_build "/opt/ros/${ROS_DISTRO}" "${BASEDIR}/upstream_ws" --packages-select gtest_vendor gmock_vendor
    permissions:
      packages: write
      contents: read
    env:
      # TODO Disabled -Wredundant-decls https://github.com/ros2/rosidl_typesupport_fastrtps/issues/28
      CXXFLAGS: >-
        -Wall -Wextra -Wwrite-strings -Wunreachable-code -Wpointer-arith
      CLANG_TIDY_ARGS: --fix --fix-errors --format-style=file
      DOCKER_IMAGE: minipada/ros2_data_collection:${{ matrix.env.IMAGE }}
      # Pull any updates to the upstream workspace (after restoring it from cache)
      AFTER_SETUP_UPSTREAM_WORKSPACE: vcs pull $BASEDIR/upstream_ws/src
      AFTER_SETUP_DOWNSTREAM_WORKSPACE: vcs pull $BASEDIR/downstream_ws/src
      # Clear the ccache stats before and log the stats after the build
      # AFTER_SETUP_CCACHE: ccache --zero-stats --max-size=10.0G
      BEFORE_BUILD_UPSTREAM_WORKSPACE: ccache -z
      AFTER_BUILD_TARGET_WORKSPACE: ccache -s
      # Changing linker to lld as ld has a behavior where it takes a long time to finish
      # Compile CCOV with Debug. Enable -Werror (except CLANG_TIDY=pedantic, which makes the clang-tidy step fail on warnings)
      TARGET_CMAKE_ARGS: >
        -DCMAKE_EXE_LINKER_FLAGS=-fuse-ld=lld
        -DCMAKE_SHARED_LINKER_FLAGS=-fuse-ld=lld
        -DCMAKE_MODULE_LINKER_FLAGS=-fuse-ld=lld
        -DCMAKE_BUILD_TYPE=${{ matrix.env.CCOV && 'Debug' || 'Release'}}
        -DCMAKE_CXX_FLAGS="-Werror $CXXFLAGS${{ matrix.env.CCOV && ' --coverage -O2 -fno-omit-frame-pointer'}}"
      UPSTREAM_CMAKE_ARGS: "-DCMAKE_CXX_FLAGS=''"
      DOWNSTREAM_CMAKE_ARGS: -DCMAKE_CXX_FLAGS="-Wall -Wextra"
      CCACHE_DIR: ${{ github.workspace }}/.ccache
      BASEDIR: ${{ github.workspace }}/.work
      CLANG_TIDY_BASE_REF: ${{ github.event_name != 'workflow_dispatch' && (github.base_ref || github.ref) || '' }}
      BEFORE_CLANG_TIDY_CHECKS: |
        # Show list of applied checks
        (cd $TARGET_REPO_PATH; clang-tidy --list-checks)
      CC: ${{ matrix.env.CLANG_TIDY && 'clang' }}
      CXX: ${{ matrix.env.CLANG_TIDY && 'clang++' }}
      ADDITIONAL_DEBS: lld

    name: ${{ matrix.env.IMAGE }}${{ matrix.env.CCOV && ' + ccov' || ''}}${{ matrix.env.CLANG_TIDY && (github.event_name != 'workflow_dispatch' && ' + clang-tidy (delta)' || ' + clang-tidy (all)') || '' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Get latest release date for rosdistro
        id: rosdistro_release_date
        uses: JafarAbdi/latest-rosdistro-release-date-action@main
        with:
          rosdistro: ${{ matrix.env.ROS_DISTRO }}
      # - name: Cache upstream workspace
      #   uses: pat-s/always-upload-cache@v3
      #   with:
      #     path: ${{ env.BASEDIR }}/upstream_ws
      #     key: ${{ env.CACHE_PREFIX }}-${{ github.run_id }}
      #     restore-keys: ${{ env.CACHE_PREFIX }}
      #   env:
      #     CACHE_PREFIX: ${{ steps.rosdistro_release_date.outputs.date }}-upstream_ws-${{ steps.repos_edit_timestamp.outputs.timestamp }}-${{ matrix.env.IMAGE }}-${{ hashFiles('.github/workflows/ci.yaml') }}
      # # The target directory cache doesn't include the source directory because
      # # that comes from the checkout.  See "prepare target_ws for cache" task below
      # - name: Cache target workspace
      #   if: "!matrix.env.CCOV"
      #   uses: pat-s/always-upload-cache@v3
      #   with:
      #     path: ${{ env.BASEDIR }}/target_ws
      #     key: ${{ env.CACHE_PREFIX }}-${{ github.run_id }}
      #     restore-keys: ${{ env.CACHE_PREFIX }}
      #   env:
      #     CACHE_PREFIX: target_ws${{ matrix.env.CCOV && '-ccov' || '' }}-${{ matrix.env.IMAGE }}-${{ hashFiles('**/CMakeLists.txt', '**/package.xml', '.github/workflows/ci.yaml') }}
      # - name: Cache ccache
      #   uses: pat-s/always-upload-cache@v3
      #   with:
      #     path: ${{ env.CCACHE_DIR }}
      #     key: ${{ env.CACHE_PREFIX }}-${{ github.sha }}-${{ github.run_id }}
      #     restore-keys: |
      #       ${{ env.CACHE_PREFIX }}-${{ github.sha }}
      #       ${{ env.CACHE_PREFIX }}
      #   env:
      #     CACHE_PREFIX: ccache-${{ matrix.env.IMAGE }}${{ matrix.env.CCOV && '-ccov' || '' }}
      # - name: Configure ccache
      #   run: |
      #     mkdir -p ${{ env.CCACHE_DIR }}
      #     cp .github/ccache.conf ${{ env.CCACHE_DIR }}/ccache.conf
      - name: Workaround permission issue # https://github.com/actions/checkout/issues/760#issuecomment-1097501613
        run: |
          git config --global --add safe.directory '*'
          find /home/runner/work/ -name package.xml | xargs dirname | tr '\n' '\0' |xargs -0 -n1 git config --global --add safe.directory || true
      - id: ici
        name: Run industrial_ci
        uses: ros-industrial/industrial_ci@master
        env: ${{ matrix.env }}
      - name: Workaround fix permission #https://github.com/actions/checkout/issues/211
        # Needed when fetching fluent_bit_vendor
        if: always()
        run: |
          sudo chown -R runner:runner ${{env.BASEDIR}}/*
      - name: Upload test artifacts (on failure)
        uses: actions/upload-artifact@v3
        if: failure() && (steps.ici.outputs.run_target_test || steps.ici.outputs.target_test_results)
        with:
          name: test-results-${{ matrix.env.IMAGE }}
          path: ${{ env.BASEDIR }}/target_ws/**/test_results/**/*.xml
      - name: Generate codecov report
        uses: rhaschke/lcov-action@main
        if: always() && matrix.env.CCOV && steps.ici.outputs.target_test_results == '0'
        with:
          docker: $DOCKER_IMAGE
          workdir: ${{ env.BASEDIR }}/target_ws
          ignore: '"*/target_ws/build/*" "*/target_ws/install/*" "*/test/*"'
      - name: Upload codecov report
        uses: codecov/codecov-action@v3
        if: always() && matrix.env.CCOV && steps.ici.outputs.target_test_results == '0'
        with:
          files: ${{ env.BASEDIR }}/target_ws/coverage.info
          token: ${{ secrets.CODECOV_TOKEN }}
      - name: Upload clang-tidy changes
        uses: rhaschke/upload-git-patch-action@main
        if: always() && matrix.env.CLANG_TIDY
        with:
          name: clang-tidy
          path: ${{ env.BASEDIR }}/target_ws/src/$(basename $(pwd))
      # - name: Prepare target_ws for cache
      #   if: always() && !matrix.env.CCOV
      #   run: |
      #     mkdir target_ws
      #     du -sh ${{ env.BASEDIR }}/target_ws
      #     sudo find ${{ env.BASEDIR }}/target_ws -wholename '*/test_results/*' -delete
      #     sudo rm -rf ${{ env.BASEDIR }}/target_ws/src
      #     du -sh ${{ env.BASEDIR }}/target_ws
