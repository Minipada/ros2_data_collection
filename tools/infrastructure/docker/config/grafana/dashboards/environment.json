{
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": {
          "type": "grafana",
          "uid": "-- Grafana --"
        },
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "type": "dashboard"
      }
    ]
  },
  "editable": true,
  "fiscalYearStartMonth": 0,
  "graphTooltip": 0,
  "id": 2,
  "links": [],
  "liveNow": false,
  "panels": [
    {
      "datasource": {
        "type": "influxdb",
        "uid": "flb_influxdb"
      },
      "gridPos": {
        "h": 21,
        "w": 4,
        "x": 0,
        "y": 0
      },
      "id": 1,
      "options": {
        "code": {
          "language": "plaintext",
          "showLineNumbers": false,
          "showMiniMap": false
        },
        "content":
            "<img id=\"logo-dc\"\n    style=\"max-width: 150px; width: 60%; margin-left: auto; margin-right: auto; display: block; margin-bottom: 3px;\"\n    src=\"/public/img/dc/dc.png\">\n\n<h4><a href=\"http://localhost:3000/\">Home</a></h4>\n<h4><a href=\"http://localhost:3000/d/bfb348f2-c2cb-47c3-a3d1-dcc26a204f05/ros-2-data-collection-system\">System</a></h4>\n<h4><a href=\"http://localhost:3000/d/e5e1e5c0-c76e-4545-ad8e-8747ee3f09b8/ros-2-data-collection-robot\">Robot</a></h4>\n<h4><a href=\"http://localhost:3000/d/bcd48967-2d49-4c3d-8091-ce6e71a8b009/ros-2-data-collection-environment\">Environment</a></h4>\n<h4><a href=\"http://localhost:3000/d/ed559b23-bbc2-4b45-a58e-24566881b970/ros-2-data-collection-infrastructure\">Infrastructure</a></h4>\n\n<p><strong>Documentation</strong>: <a\n        href=\"https://minipada.github.io/ros2_data_collection\">https://minipada.github.io/ros2_data_collection</a></p>\n<p><strong>Source code</strong>: <a\n        href=\"https://github.com/minipada/ros2_data_collection\">https://github.com/minipada/ros2_data_collection</a></p>\n\n<div>Under <a target=\"_blank\" s href=\"https://tldrlegal.com/license/mozilla-public-license-2.0-(mpl-2)\">MPL-2.0</a>\n    license</a>\n</div>\n",
        "mode": "html"
      },
      "pluginVersion": "9.5.2",
      "type": "text"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "flb_influxdb"
      },
      "gridPos": {
        "h": 21,
        "w": 16,
        "x": 4,
        "y": 0
      },
      "id": 2,
      "options": {
        "autoPlay": true,
        "controls": true,
        "height": 0,
        "heightMode": "original",
        "toolbar": true,
        "width": 0,
        "widthMode": "original"
      },
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "flb_influxdb"
          },
          "groupBy": [],
          "measurement": "flb_influxdb",
          "orderByTime": "ASC",
          "policy": "autogen",
          "refId": "A",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "/map/base64/png"
                ],
                "type": "field"
              }
            ]
          ],
          "tags": []
        }
      ],
      "title": "Map",
      "type": "volkovlabs-image-panel"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "flb_influxdb"
      },
      "gridPos": {
        "h": 21,
        "w": 4,
        "x": 20,
        "y": 0
      },
      "id": 3,
      "options": {
        "content": "<pre><code id=\"map_yaml\" class=\"language-yaml\">{{last}}</code></pre>",
        "defaultContent": "No data",
        "editor": {
          "format": "none",
          "height": 856,
          "language": "html"
        },
        "editors": [
          "helpers"
        ],
        "everyRow": true,
        "helpers":
            "/*!\n  Highlight.js v11.7.0 (git: 82688fad18)\n  (c) 2006-2022 undefined and other contributors\n  License: BSD-3-Clause\n */\nvar hljs = function () {\n  \"use strict\"; var e = { exports: {} }; function n(e) {\n    return e instanceof Map ? e.clear = e.delete = e.set = () => {\n      throw Error(\"map is read-only\")\n    } : e instanceof Set && (e.add = e.clear = e.delete = () => {\n      throw Error(\"set is read-only\")\n    }), Object.freeze(e), Object.getOwnPropertyNames(e).forEach((t => {\n      var a = e[t]\n        ; \"object\" != typeof a || Object.isFrozen(a) || n(a)\n    })), e\n  }\n  e.exports = n, e.exports.default = n; class t {\n    constructor(e) {\n      void 0 === e.data && (e.data = {}), this.data = e.data, this.isMatchIgnored = !1\n    }\n    ignoreMatch() { this.isMatchIgnored = !0 }\n  } function a(e) {\n    return e.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\").replace(/\"/g, \"&quot;\").replace(/'/g, \"&#x27;\")\n  } function i(e, ...n) {\n    const t = Object.create(null); for (const n in e) t[n] = e[n]\n      ; return n.forEach((e => { for (const n in e) t[n] = e[n] })), t\n  }\n  const r = e => !!e.scope || e.sublanguage && e.language; class s {\n    constructor(e, n) {\n      this.buffer = \"\", this.classPrefix = n.classPrefix, e.walk(this)\n    } addText(e) {\n      this.buffer += a(e)\n    } openNode(e) {\n      if (!r(e)) return; let n = \"\"\n        ; n = e.sublanguage ? \"language-\" + e.language : ((e, { prefix: n }) => {\n          if (e.includes(\".\")) {\n            const t = e.split(\".\")\n              ; return [`${n}${t.shift()}`, ...t.map(((e, n) => `${e}${\"_\".repeat(n + 1)}`))].join(\" \")\n          } return `${n}${e}`\n        })(e.scope, { prefix: this.classPrefix }), this.span(n)\n    }\n    closeNode(e) { r(e) && (this.buffer += \"</span>\") } value() { return this.buffer } span(e) {\n      this.buffer += `<span class=\"${e}\">`\n    }\n  } const o = (e = {}) => {\n    const n = { children: [] }\n      ; return Object.assign(n, e), n\n  }; class l {\n    constructor() {\n      this.rootNode = o(), this.stack = [this.rootNode]\n    } get top() {\n      return this.stack[this.stack.length - 1]\n    } get root() { return this.rootNode } add(e) {\n      this.top.children.push(e)\n    } openNode(e) {\n      const n = o({ scope: e })\n        ; this.add(n), this.stack.push(n)\n    } closeNode() {\n      if (this.stack.length > 1) return this.stack.pop()\n    } closeAllNodes() {\n      for (; this.closeNode(););\n    } toJSON() { return JSON.stringify(this.rootNode, null, 4) }\n    walk(e) { return this.constructor._walk(e, this.rootNode) } static _walk(e, n) {\n      return \"string\" == typeof n ? e.addText(n) : n.children && (e.openNode(n),\n        n.children.forEach((n => this._walk(e, n))), e.closeNode(n)), e\n    } static _collapse(e) {\n      \"string\" != typeof e && e.children && (e.children.every((e => \"string\" == typeof e)) ? e.children = [e.children.join(\"\")] : e.children.forEach((e => {\n        l._collapse(e)\n      })))\n    }\n  } class c extends l {\n    constructor(e) { super(), this.options = e }\n    addKeyword(e, n) { \"\" !== e && (this.openNode(n), this.addText(e), this.closeNode()) }\n    addText(e) { \"\" !== e && this.add(e) } addSublanguage(e, n) {\n      const t = e.root\n        ; t.sublanguage = !0, t.language = n, this.add(t)\n    } toHTML() {\n      return new s(this, this.options).value()\n    } finalize() { return !0 }\n  } function d(e) {\n    return e ? \"string\" == typeof e ? e : e.source : null\n  } function g(e) { return m(\"(?=\", e, \")\") }\n  function u(e) { return m(\"(?:\", e, \")*\") } function b(e) { return m(\"(?:\", e, \")?\") }\n  function m(...e) { return e.map((e => d(e))).join(\"\") } function p(...e) {\n    const n = (e => {\n      const n = e[e.length - 1]\n        ; return \"object\" == typeof n && n.constructor === Object ? (e.splice(e.length - 1, 1), n) : {}\n    })(e); return \"(\" + (n.capture ? \"\" : \"?:\") + e.map((e => d(e))).join(\"|\") + \")\"\n  }\n  function _(e) { return RegExp(e.toString() + \"|\").exec(\"\").length - 1 }\n  const h = /\\[(?:[^\\\\\\]]|\\\\.)*\\]|\\(\\??|\\\\([1-9][0-9]*)|\\\\./\n    ; function f(e, { joinWith: n }) {\n      let t = 0; return e.map((e => {\n        t += 1; const n = t\n          ; let a = d(e), i = \"\"; for (; a.length > 0;) {\n            const e = h.exec(a); if (!e) { i += a; break }\n            i += a.substring(0, e.index),\n              a = a.substring(e.index + e[0].length), \"\\\\\" === e[0][0] && e[1] ? i += \"\\\\\" + (Number(e[1]) + n) : (i += e[0],\n                \"(\" === e[0] && t++)\n          } return i\n      })).map((e => `(${e})`)).join(n)\n    }\n  const E = \"[a-zA-Z]\\\\w*\", y = \"[a-zA-Z_]\\\\w*\", w = \"\\\\b\\\\d+(\\\\.\\\\d+)?\", N = \"(-?)(\\\\b0[xX][a-fA-F0-9]+|(\\\\b\\\\d+(\\\\.\\\\d*)?|\\\\.\\\\d+)([eE][-+]?\\\\d+)?)\", v = \"\\\\b(0b[01]+)\", O = {\n    begin: \"\\\\\\\\[\\\\s\\\\S]\", relevance: 0\n  }, k = {\n    scope: \"string\", begin: \"'\", end: \"'\",\n    illegal: \"\\\\n\", contains: [O]\n  }, x = {\n    scope: \"string\", begin: '\"', end: '\"', illegal: \"\\\\n\",\n    contains: [O]\n  }, M = (e, n, t = {}) => {\n    const a = i({\n      scope: \"comment\", begin: e, end: n,\n      contains: []\n    }, t); a.contains.push({\n      scope: \"doctag\",\n      begin: \"[ ]*(?=(TODO|FIXME|NOTE|BUG|OPTIMIZE|HACK|XXX):)\",\n      end: /(TODO|FIXME|NOTE|BUG|OPTIMIZE|HACK|XXX):/, excludeBegin: !0, relevance: 0\n    })\n      ; const r = p(\"I\", \"a\", \"is\", \"so\", \"us\", \"to\", \"at\", \"if\", \"in\", \"it\", \"on\", /[A-Za-z]+['](d|ve|re|ll|t|s|n)/, /[A-Za-z]+[-][a-z]+/, /[A-Za-z][a-z]{2,}/)\n      ; return a.contains.push({ begin: m(/[ ]+/, \"(\", r, /[.]?[:]?([.][ ]|[ ])/, \"){3}\") }), a\n  }, S = M(\"//\", \"$\"), A = M(\"/\\\\*\", \"\\\\*/\"), C = M(\"#\", \"$\"); var T = Object.freeze({\n    __proto__: null, MATCH_NOTHING_RE: /\\b\\B/, IDENT_RE: E, UNDERSCORE_IDENT_RE: y,\n    NUMBER_RE: w, C_NUMBER_RE: N, BINARY_NUMBER_RE: v,\n    RE_STARTERS_RE: \"!|!=|!==|%|%=|&|&&|&=|\\\\*|\\\\*=|\\\\+|\\\\+=|,|-|-=|/=|/|:|;|<<|<<=|<=|<|===|==|=|>>>=|>>=|>=|>>>|>>|>|\\\\?|\\\\[|\\\\{|\\\\(|\\\\^|\\\\^=|\\\\||\\\\|=|\\\\|\\\\||~\",\n    SHEBANG: (e = {}) => {\n      const n = /^#![ ]*\\//\n        ; return e.binary && (e.begin = m(n, /.*\\b/, e.binary, /\\b.*/)), i({\n          scope: \"meta\", begin: n,\n          end: /$/, relevance: 0, \"on:begin\": (e, n) => { 0 !== e.index && n.ignoreMatch() }\n        }, e)\n    },\n    BACKSLASH_ESCAPE: O, APOS_STRING_MODE: k, QUOTE_STRING_MODE: x, PHRASAL_WORDS_MODE: {\n      begin: /\\b(a|an|the|are|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|they|like|more)\\b/\n    }, COMMENT: M, C_LINE_COMMENT_MODE: S, C_BLOCK_COMMENT_MODE: A, HASH_COMMENT_MODE: C,\n    NUMBER_MODE: { scope: \"number\", begin: w, relevance: 0 }, C_NUMBER_MODE: {\n      scope: \"number\",\n      begin: N, relevance: 0\n    }, BINARY_NUMBER_MODE: { scope: \"number\", begin: v, relevance: 0 },\n    REGEXP_MODE: {\n      begin: /(?=\\/[^/\\n]*\\/)/, contains: [{\n        scope: \"regexp\", begin: /\\//,\n        end: /\\/[gimuy]*/, illegal: /\\n/, contains: [O, {\n          begin: /\\[/, end: /\\]/, relevance: 0,\n          contains: [O]\n        }]\n      }]\n    }, TITLE_MODE: { scope: \"title\", begin: E, relevance: 0 },\n    UNDERSCORE_TITLE_MODE: { scope: \"title\", begin: y, relevance: 0 }, METHOD_GUARD: {\n      begin: \"\\\\.\\\\s*[a-zA-Z_]\\\\w*\", relevance: 0\n    }, END_SAME_AS_BEGIN: e => Object.assign(e, {\n      \"on:begin\": (e, n) => { n.data._beginMatch = e[1] }, \"on:end\": (e, n) => {\n        n.data._beginMatch !== e[1] && n.ignoreMatch()\n      }\n    })\n  }); function R(e, n) {\n    \".\" === e.input[e.index - 1] && n.ignoreMatch()\n  } function D(e, n) {\n    void 0 !== e.className && (e.scope = e.className, delete e.className)\n  } function I(e, n) {\n    n && e.beginKeywords && (e.begin = \"\\\\b(\" + e.beginKeywords.split(\" \").join(\"|\") + \")(?!\\\\.)(?=\\\\b|\\\\s)\",\n      e.__beforeBegin = R, e.keywords = e.keywords || e.beginKeywords, delete e.beginKeywords,\n      void 0 === e.relevance && (e.relevance = 0))\n  } function L(e, n) {\n    Array.isArray(e.illegal) && (e.illegal = p(...e.illegal))\n  } function B(e, n) {\n    if (e.match) {\n      if (e.begin || e.end) throw Error(\"begin & end are not supported with match\")\n        ; e.begin = e.match, delete e.match\n    }\n  } function $(e, n) {\n    void 0 === e.relevance && (e.relevance = 1)\n  } const z = (e, n) => {\n    if (!e.beforeMatch) return\n      ; if (e.starts) throw Error(\"beforeMatch cannot be used with starts\")\n        ; const t = Object.assign({}, e); Object.keys(e).forEach((n => {\n          delete e[n]\n        })), e.keywords = t.keywords, e.begin = m(t.beforeMatch, g(t.begin)), e.starts = {\n          relevance: 0, contains: [Object.assign(t, { endsParent: !0 })]\n        }, e.relevance = 0, delete t.beforeMatch\n  }, F = [\"of\", \"and\", \"for\", \"in\", \"not\", \"or\", \"if\", \"then\", \"parent\", \"list\", \"value\"]\n    ; function U(e, n, t = \"keyword\") {\n      const a = Object.create(null)\n        ; return \"string\" == typeof e ? i(t, e.split(\" \")) : Array.isArray(e) ? i(t, e) : Object.keys(e).forEach((t => {\n          Object.assign(a, U(e[t], n, t))\n        })), a; function i(e, t) {\n          n && (t = t.map((e => e.toLowerCase()))), t.forEach((n => {\n            const t = n.split(\"|\")\n              ; a[t[0]] = [e, j(t[0], t[1])]\n          }))\n        }\n    } function j(e, n) {\n      return n ? Number(n) : (e => F.includes(e.toLowerCase()))(e) ? 0 : 1\n    } const P = {}, K = e => {\n      console.error(e)\n    }, H = (e, ...n) => { console.log(\"WARN: \" + e, ...n) }, q = (e, n) => {\n      P[`${e}/${n}`] || (console.log(`Deprecated as of ${e}. ${n}`), P[`${e}/${n}`] = !0)\n    }, Z = Error(); function G(e, n, { key: t }) {\n      let a = 0; const i = e[t], r = {}, s = {}\n        ; for (let e = 1; e <= n.length; e++)s[e + a] = i[e], r[e + a] = !0, a += _(n[e - 1])\n          ; e[t] = s, e[t]._emit = r, e[t]._multi = !0\n    } function W(e) {\n      (e => {\n        e.scope && \"object\" == typeof e.scope && null !== e.scope && (e.beginScope = e.scope,\n          delete e.scope)\n      })(e), \"string\" == typeof e.beginScope && (e.beginScope = {\n        _wrap: e.beginScope\n      }), \"string\" == typeof e.endScope && (e.endScope = {\n        _wrap: e.endScope\n      }), (e => {\n        if (Array.isArray(e.begin)) {\n          if (e.skip || e.excludeBegin || e.returnBegin) throw K(\"skip, excludeBegin, returnBegin not compatible with beginScope: {}\"),\n            Z\n            ; if (\"object\" != typeof e.beginScope || null === e.beginScope) throw K(\"beginScope must be object\"),\n              Z; G(e, e.begin, { key: \"beginScope\" }), e.begin = f(e.begin, { joinWith: \"\" })\n        }\n      })(e), (e => {\n        if (Array.isArray(e.end)) {\n          if (e.skip || e.excludeEnd || e.returnEnd) throw K(\"skip, excludeEnd, returnEnd not compatible with endScope: {}\"),\n            Z\n            ; if (\"object\" != typeof e.endScope || null === e.endScope) throw K(\"endScope must be object\"),\n              Z; G(e, e.end, { key: \"endScope\" }), e.end = f(e.end, { joinWith: \"\" })\n        }\n      })(e)\n    } function Q(e) {\n      function n(n, t) {\n        return RegExp(d(n), \"m\" + (e.case_insensitive ? \"i\" : \"\") + (e.unicodeRegex ? \"u\" : \"\") + (t ? \"g\" : \"\"))\n      } class t {\n        constructor() {\n          this.matchIndexes = {}, this.regexes = [], this.matchAt = 1, this.position = 0\n        }\n        addRule(e, n) {\n          n.position = this.position++, this.matchIndexes[this.matchAt] = n, this.regexes.push([n, e]),\n            this.matchAt += _(e) + 1\n        } compile() {\n          0 === this.regexes.length && (this.exec = () => null)\n            ; const e = this.regexes.map((e => e[1])); this.matcherRe = n(f(e, {\n              joinWith: \"|\"\n            }), !0), this.lastIndex = 0\n        } exec(e) {\n          this.matcherRe.lastIndex = this.lastIndex\n            ; const n = this.matcherRe.exec(e); if (!n) return null\n              ; const t = n.findIndex(((e, n) => n > 0 && void 0 !== e)), a = this.matchIndexes[t]\n            ; return n.splice(0, t), Object.assign(n, a)\n        }\n      } class a {\n        constructor() {\n          this.rules = [], this.multiRegexes = [],\n            this.count = 0, this.lastIndex = 0, this.regexIndex = 0\n        } getMatcher(e) {\n          if (this.multiRegexes[e]) return this.multiRegexes[e]; const n = new t\n            ; return this.rules.slice(e).forEach((([e, t]) => n.addRule(e, t))),\n              n.compile(), this.multiRegexes[e] = n, n\n        } resumingScanAtSamePosition() {\n          return 0 !== this.regexIndex\n        } considerAll() { this.regexIndex = 0 } addRule(e, n) {\n          this.rules.push([e, n]), \"begin\" === n.type && this.count++\n        } exec(e) {\n          const n = this.getMatcher(this.regexIndex); n.lastIndex = this.lastIndex\n            ; let t = n.exec(e)\n            ; if (this.resumingScanAtSamePosition()) if (t && t.index === this.lastIndex); else {\n              const n = this.getMatcher(0); n.lastIndex = this.lastIndex + 1, t = n.exec(e)\n            }\n          return t && (this.regexIndex += t.position + 1,\n            this.regexIndex === this.count && this.considerAll()), t\n        }\n      }\n      if (e.compilerExtensions || (e.compilerExtensions = []),\n        e.contains && e.contains.includes(\"self\")) throw Error(\"ERR: contains `self` is not supported at the top-level of a language.  See documentation.\")\n        ; return e.classNameAliases = i(e.classNameAliases || {}), function t(r, s) {\n          const o = r\n            ; if (r.isCompiled) return o\n              ;[D, B, W, z].forEach((e => e(r, s))), e.compilerExtensions.forEach((e => e(r, s))),\n                r.__beforeBegin = null, [I, L, $].forEach((e => e(r, s))), r.isCompiled = !0; let l = null\n            ; return \"object\" == typeof r.keywords && r.keywords.$pattern && (r.keywords = Object.assign({}, r.keywords),\n              l = r.keywords.$pattern,\n              delete r.keywords.$pattern), l = l || /\\w+/, r.keywords && (r.keywords = U(r.keywords, e.case_insensitive)),\n              o.keywordPatternRe = n(l, !0),\n              s && (r.begin || (r.begin = /\\B|\\b/), o.beginRe = n(o.begin), r.end || r.endsWithParent || (r.end = /\\B|\\b/),\n                r.end && (o.endRe = n(o.end)),\n                o.terminatorEnd = d(o.end) || \"\", r.endsWithParent && s.terminatorEnd && (o.terminatorEnd += (r.end ? \"|\" : \"\") + s.terminatorEnd)),\n              r.illegal && (o.illegalRe = n(r.illegal)),\n              r.contains || (r.contains = []), r.contains = [].concat(...r.contains.map((e => (e => (e.variants && !e.cachedVariants && (e.cachedVariants = e.variants.map((n => i(e, {\n                variants: null\n              }, n)))), e.cachedVariants ? e.cachedVariants : X(e) ? i(e, {\n                starts: e.starts ? i(e.starts) : null\n              }) : Object.isFrozen(e) ? i(e) : e))(\"self\" === e ? r : e)))), r.contains.forEach((e => {\n                t(e, o)\n              })), r.starts && t(r.starts, s), o.matcher = (e => {\n                const n = new a\n                  ; return e.contains.forEach((e => n.addRule(e.begin, {\n                    rule: e, type: \"begin\"\n                  }))), e.terminatorEnd && n.addRule(e.terminatorEnd, {\n                    type: \"end\"\n                  }), e.illegal && n.addRule(e.illegal, { type: \"illegal\" }), n\n              })(o), o\n        }(e)\n    } function X(e) {\n      return !!e && (e.endsWithParent || X(e.starts))\n    } class V extends Error {\n    constructor(e, n) { super(e), this.name = \"HTMLInjectionError\", this.html = n }\n  }\n  const J = a, Y = i, ee = Symbol(\"nomatch\"); var ne = (n => {\n    const a = Object.create(null), i = Object.create(null), r = []; let s = !0\n      ; const o = \"Could not find the language '{}', did you forget to load/include a language module?\", l = {\n        disableAutodetect: !0, name: \"Plain text\", contains: []\n      }; let d = {\n        ignoreUnescapedHTML: !1, throwUnescapedHTML: !1, noHighlightRe: /^(no-?highlight)$/i,\n        languageDetectRe: /\\blang(?:uage)?-([\\w-]+)\\b/i, classPrefix: \"hljs-\",\n        cssSelector: \"pre code\", languages: null, __emitter: c\n      }; function _(e) {\n        return d.noHighlightRe.test(e)\n      } function h(e, n, t) {\n        let a = \"\", i = \"\"\n          ; \"object\" == typeof n ? (a = e,\n            t = n.ignoreIllegals, i = n.language) : (q(\"10.7.0\", \"highlight(lang, code, ...args) has been deprecated.\"),\n              q(\"10.7.0\", \"Please use highlight(code, options) instead.\\nhttps://github.com/highlightjs/highlight.js/issues/2277\"),\n              i = e, a = n), void 0 === t && (t = !0); const r = { code: a, language: i }; x(\"before:highlight\", r)\n          ; const s = r.result ? r.result : f(r.language, r.code, t)\n          ; return s.code = r.code, x(\"after:highlight\", s), s\n      } function f(e, n, i, r) {\n        const l = Object.create(null); function c() {\n          if (!k.keywords) return void M.addText(S)\n            ; let e = 0; k.keywordPatternRe.lastIndex = 0; let n = k.keywordPatternRe.exec(S), t = \"\"\n            ; for (; n;) {\n              t += S.substring(e, n.index)\n                ; const i = w.case_insensitive ? n[0].toLowerCase() : n[0], r = (a = i, k.keywords[a]); if (r) {\n                  const [e, a] = r\n                    ; if (M.addText(t), t = \"\", l[i] = (l[i] || 0) + 1, l[i] <= 7 && (A += a), e.startsWith(\"_\")) t += n[0]; else {\n                      const t = w.classNameAliases[e] || e; M.addKeyword(n[0], t)\n                    }\n                } else t += n[0]\n                ; e = k.keywordPatternRe.lastIndex, n = k.keywordPatternRe.exec(S)\n            } var a\n            ; t += S.substring(e), M.addText(t)\n        } function g() {\n          null != k.subLanguage ? (() => {\n            if (\"\" === S) return; let e = null; if (\"string\" == typeof k.subLanguage) {\n              if (!a[k.subLanguage]) return void M.addText(S)\n                ; e = f(k.subLanguage, S, !0, x[k.subLanguage]), x[k.subLanguage] = e._top\n            } else e = E(S, k.subLanguage.length ? k.subLanguage : null)\n              ; k.relevance > 0 && (A += e.relevance), M.addSublanguage(e._emitter, e.language)\n          })() : c(), S = \"\"\n        } function u(e, n) {\n          let t = 1; const a = n.length - 1; for (; t <= a;) {\n            if (!e._emit[t]) { t++; continue } const a = w.classNameAliases[e[t]] || e[t], i = n[t]\n              ; a ? M.addKeyword(i, a) : (S = i, c(), S = \"\"), t++\n          }\n        } function b(e, n) {\n          return e.scope && \"string\" == typeof e.scope && M.openNode(w.classNameAliases[e.scope] || e.scope),\n            e.beginScope && (e.beginScope._wrap ? (M.addKeyword(S, w.classNameAliases[e.beginScope._wrap] || e.beginScope._wrap),\n              S = \"\") : e.beginScope._multi && (u(e.beginScope, n), S = \"\")), k = Object.create(e, {\n                parent: {\n                  value: k\n                }\n              }), k\n        } function m(e, n, a) {\n          let i = ((e, n) => {\n            const t = e && e.exec(n)\n              ; return t && 0 === t.index\n          })(e.endRe, a); if (i) {\n            if (e[\"on:end\"]) {\n              const a = new t(e)\n                ; e[\"on:end\"](n, a), a.isMatchIgnored && (i = !1)\n            } if (i) {\n              for (; e.endsParent && e.parent;)e = e.parent; return e\n            }\n          }\n          if (e.endsWithParent) return m(e.parent, n, a)\n        } function p(e) {\n          return 0 === k.matcher.regexIndex ? (S += e[0], 1) : (R = !0, 0)\n        } function _(e) {\n          const t = e[0], a = n.substring(e.index), i = m(k, e, a); if (!i) return ee; const r = k\n            ; k.endScope && k.endScope._wrap ? (g(),\n              M.addKeyword(t, k.endScope._wrap)) : k.endScope && k.endScope._multi ? (g(),\n                u(k.endScope, e)) : r.skip ? S += t : (r.returnEnd || r.excludeEnd || (S += t),\n                  g(), r.excludeEnd && (S = t)); do {\n                    k.scope && M.closeNode(), k.skip || k.subLanguage || (A += k.relevance), k = k.parent\n                  } while (k !== i.parent); return i.starts && b(i.starts, e), r.returnEnd ? 0 : t.length\n        }\n        let h = {}; function y(a, r) {\n          const o = r && r[0]; if (S += a, null == o) return g(), 0\n            ; if (\"begin\" === h.type && \"end\" === r.type && h.index === r.index && \"\" === o) {\n              if (S += n.slice(r.index, r.index + 1), !s) {\n                const n = Error(`0 width match regex (${e})`)\n                  ; throw n.languageName = e, n.badRule = h.rule, n\n              } return 1\n            }\n          if (h = r, \"begin\" === r.type) return (e => {\n            const n = e[0], a = e.rule, i = new t(a), r = [a.__beforeBegin, a[\"on:begin\"]]\n              ; for (const t of r) if (t && (t(e, i), i.isMatchIgnored)) return p(n)\n                ; return a.skip ? S += n : (a.excludeBegin && (S += n),\n                  g(), a.returnBegin || a.excludeBegin || (S = n)), b(a, e), a.returnBegin ? 0 : n.length\n          })(r)\n            ; if (\"illegal\" === r.type && !i) {\n              const e = Error('Illegal lexeme \"' + o + '\" for mode \"' + (k.scope || \"<unnamed>\") + '\"')\n                ; throw e.mode = k, e\n            } if (\"end\" === r.type) { const e = _(r); if (e !== ee) return e }\n          if (\"illegal\" === r.type && \"\" === o) return 1\n            ; if (T > 1e5 && T > 3 * r.index) throw Error(\"potential infinite loop, way more iterations than matches\")\n              ; return S += o, o.length\n        } const w = v(e)\n          ; if (!w) throw K(o.replace(\"{}\", e)), Error('Unknown language: \"' + e + '\"')\n            ; const N = Q(w); let O = \"\", k = r || N; const x = {}, M = new d.__emitter(d); (() => {\n              const e = []\n                ; for (let n = k; n !== w; n = n.parent)n.scope && e.unshift(n.scope)\n                  ; e.forEach((e => M.openNode(e)))\n            })(); let S = \"\", A = 0, C = 0, T = 0, R = !1; try {\n              for (k.matcher.considerAll(); ;) {\n                T++, R ? R = !1 : k.matcher.considerAll(), k.matcher.lastIndex = C\n                  ; const e = k.matcher.exec(n); if (!e) break; const t = y(n.substring(C, e.index), e)\n                  ; C = e.index + t\n              }\n              return y(n.substring(C)), M.closeAllNodes(), M.finalize(), O = M.toHTML(), {\n                language: e, value: O, relevance: A, illegal: !1, _emitter: M, _top: k\n              }\n            } catch (t) {\n              if (t.message && t.message.includes(\"Illegal\")) return {\n                language: e, value: J(n),\n                illegal: !0, relevance: 0, _illegalBy: {\n                  message: t.message, index: C,\n                  context: n.slice(C - 100, C + 100), mode: t.mode, resultSoFar: O\n                }, _emitter: M\n              }; if (s) return {\n                language: e, value: J(n), illegal: !1, relevance: 0, errorRaised: t, _emitter: M, _top: k\n              }\n                ; throw t\n            }\n      } function E(e, n) {\n        n = n || d.languages || Object.keys(a); const t = (e => {\n          const n = { value: J(e), illegal: !1, relevance: 0, _top: l, _emitter: new d.__emitter(d) }\n            ; return n._emitter.addText(e), n\n        })(e), i = n.filter(v).filter(k).map((n => f(n, e, !1)))\n          ; i.unshift(t); const r = i.sort(((e, n) => {\n            if (e.relevance !== n.relevance) return n.relevance - e.relevance\n              ; if (e.language && n.language) {\n                if (v(e.language).supersetOf === n.language) return 1\n                  ; if (v(n.language).supersetOf === e.language) return -1\n              } return 0\n          })), [s, o] = r, c = s\n          ; return c.secondBest = o, c\n      } function y(e) {\n        let n = null; const t = (e => {\n          let n = e.className + \" \"; n += e.parentNode ? e.parentNode.className : \"\"\n            ; const t = d.languageDetectRe.exec(n); if (t) {\n              const n = v(t[1])\n                ; return n || (H(o.replace(\"{}\", t[1])),\n                  H(\"Falling back to no-highlight mode for this block.\", e)), n ? t[1] : \"no-highlight\"\n            }\n          return n.split(/\\s+/).find((e => _(e) || v(e)))\n        })(e); if (_(t)) return\n          ; if (x(\"before:highlightElement\", {\n            el: e, language: t\n          }), e.children.length > 0 && (d.ignoreUnescapedHTML || (console.warn(\"One of your code blocks includes unescaped HTML. This is a potentially serious security risk.\"),\n            console.warn(\"https://github.com/highlightjs/highlight.js/wiki/security\"),\n            console.warn(\"The element with unescaped HTML:\"),\n            console.warn(e)), d.throwUnescapedHTML)) throw new V(\"One of your code blocks includes unescaped HTML.\", e.innerHTML)\n          ; n = e; const a = n.textContent, r = t ? h(a, { language: t, ignoreIllegals: !0 }) : E(a)\n          ; e.innerHTML = r.value, ((e, n, t) => {\n            const a = n && i[n] || t\n              ; e.classList.add(\"hljs\"), e.classList.add(\"language-\" + a)\n          })(e, t, r.language), e.result = {\n            language: r.language, re: r.relevance,\n            relevance: r.relevance\n          }, r.secondBest && (e.secondBest = {\n            language: r.secondBest.language, relevance: r.secondBest.relevance\n          }), x(\"after:highlightElement\", { el: e, result: r, text: a })\n      } let w = !1; function N() {\n        \"loading\" !== document.readyState ? document.querySelectorAll(d.cssSelector).forEach(y) : w = !0\n      } function v(e) { return e = (e || \"\").toLowerCase(), a[e] || a[i[e]] }\n    function O(e, { languageName: n }) {\n      \"string\" == typeof e && (e = [e]), e.forEach((e => {\n        i[e.toLowerCase()] = n\n      }))\n    } function k(e) {\n      const n = v(e)\n        ; return n && !n.disableAutodetect\n    } function x(e, n) {\n      const t = e; r.forEach((e => {\n        e[t] && e[t](n)\n      }))\n    }\n    \"undefined\" != typeof window && window.addEventListener && window.addEventListener(\"DOMContentLoaded\", (() => {\n      w && N()\n    }), !1), Object.assign(n, {\n      highlight: h, highlightAuto: E, highlightAll: N,\n      highlightElement: y,\n      highlightBlock: e => (q(\"10.7.0\", \"highlightBlock will be removed entirely in v12.0\"),\n        q(\"10.7.0\", \"Please use highlightElement now.\"), y(e)), configure: e => { d = Y(d, e) },\n      initHighlighting: () => {\n        N(), q(\"10.6.0\", \"initHighlighting() deprecated.  Use highlightAll() now.\")\n      },\n      initHighlightingOnLoad: () => {\n        N(), q(\"10.6.0\", \"initHighlightingOnLoad() deprecated.  Use highlightAll() now.\")\n      }, registerLanguage: (e, t) => {\n        let i = null; try { i = t(n) } catch (n) {\n          if (K(\"Language definition for '{}' could not be registered.\".replace(\"{}\", e)),\n            !s) throw n; K(n), i = l\n        }\n        i.name || (i.name = e), a[e] = i, i.rawDefinition = t.bind(null, n), i.aliases && O(i.aliases, {\n          languageName: e\n        })\n      }, unregisterLanguage: e => {\n        delete a[e]\n          ; for (const n of Object.keys(i)) i[n] === e && delete i[n]\n      },\n      listLanguages: () => Object.keys(a), getLanguage: v, registerAliases: O,\n      autoDetection: k, inherit: Y, addPlugin: e => {\n        (e => {\n          e[\"before:highlightBlock\"] && !e[\"before:highlightElement\"] && (e[\"before:highlightElement\"] = n => {\n            e[\"before:highlightBlock\"](Object.assign({ block: n.el }, n))\n          }), e[\"after:highlightBlock\"] && !e[\"after:highlightElement\"] && (e[\"after:highlightElement\"] = n => {\n            e[\"after:highlightBlock\"](Object.assign({ block: n.el }, n))\n          })\n        })(e), r.push(e)\n      }\n    }), n.debugMode = () => { s = !1 }, n.safeMode = () => {\n      s = !0\n    }, n.versionString = \"11.7.0\", n.regex = {\n      concat: m, lookahead: g, either: p, optional: b,\n      anyNumberOfTimes: u\n    }; for (const n in T) \"object\" == typeof T[n] && e.exports(T[n])\n      ; return Object.assign(n, T), n\n  })({}); const te = e => ({\n    IMPORTANT: {\n      scope: \"meta\",\n      begin: \"!important\"\n    }, BLOCK_COMMENT: e.C_BLOCK_COMMENT_MODE, HEXCOLOR: {\n      scope: \"number\", begin: /#(([0-9a-fA-F]{3,4})|(([0-9a-fA-F]{2}){3,4}))\\b/\n    },\n    FUNCTION_DISPATCH: { className: \"built_in\", begin: /[\\w-]+(?=\\()/ },\n    ATTRIBUTE_SELECTOR_MODE: {\n      scope: \"selector-attr\", begin: /\\[/, end: /\\]/, illegal: \"$\",\n      contains: [e.APOS_STRING_MODE, e.QUOTE_STRING_MODE]\n    }, CSS_NUMBER_MODE: {\n      scope: \"number\",\n      begin: e.NUMBER_RE + \"(%|em|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc|px|deg|grad|rad|turn|s|ms|Hz|kHz|dpi|dpcm|dppx)?\",\n      relevance: 0\n    }, CSS_VARIABLE: { className: \"attr\", begin: /--[A-Za-z][A-Za-z0-9_-]*/ }\n  }), ae = [\"a\", \"abbr\", \"address\", \"article\", \"aside\", \"audio\", \"b\", \"blockquote\", \"body\", \"button\", \"canvas\", \"caption\", \"cite\", \"code\", \"dd\", \"del\", \"details\", \"dfn\", \"div\", \"dl\", \"dt\", \"em\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"form\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"header\", \"hgroup\", \"html\", \"i\", \"iframe\", \"img\", \"input\", \"ins\", \"kbd\", \"label\", \"legend\", \"li\", \"main\", \"mark\", \"menu\", \"nav\", \"object\", \"ol\", \"p\", \"q\", \"quote\", \"samp\", \"section\", \"span\", \"strong\", \"summary\", \"sup\", \"table\", \"tbody\", \"td\", \"textarea\", \"tfoot\", \"th\", \"thead\", \"time\", \"tr\", \"ul\", \"var\", \"video\"], ie = [\"any-hover\", \"any-pointer\", \"aspect-ratio\", \"color\", \"color-gamut\", \"color-index\", \"device-aspect-ratio\", \"device-height\", \"device-width\", \"display-mode\", \"forced-colors\", \"grid\", \"height\", \"hover\", \"inverted-colors\", \"monochrome\", \"orientation\", \"overflow-block\", \"overflow-inline\", \"pointer\", \"prefers-color-scheme\", \"prefers-contrast\", \"prefers-reduced-motion\", \"prefers-reduced-transparency\", \"resolution\", \"scan\", \"scripting\", \"update\", \"width\", \"min-width\", \"max-width\", \"min-height\", \"max-height\"], re = [\"active\", \"any-link\", \"blank\", \"checked\", \"current\", \"default\", \"defined\", \"dir\", \"disabled\", \"drop\", \"empty\", \"enabled\", \"first\", \"first-child\", \"first-of-type\", \"fullscreen\", \"future\", \"focus\", \"focus-visible\", \"focus-within\", \"has\", \"host\", \"host-context\", \"hover\", \"indeterminate\", \"in-range\", \"invalid\", \"is\", \"lang\", \"last-child\", \"last-of-type\", \"left\", \"link\", \"local-link\", \"not\", \"nth-child\", \"nth-col\", \"nth-last-child\", \"nth-last-col\", \"nth-last-of-type\", \"nth-of-type\", \"only-child\", \"only-of-type\", \"optional\", \"out-of-range\", \"past\", \"placeholder-shown\", \"read-only\", \"read-write\", \"required\", \"right\", \"root\", \"scope\", \"target\", \"target-within\", \"user-invalid\", \"valid\", \"visited\", \"where\"], se = [\"after\", \"backdrop\", \"before\", \"cue\", \"cue-region\", \"first-letter\", \"first-line\", \"grammar-error\", \"marker\", \"part\", \"placeholder\", \"selection\", \"slotted\", \"spelling-error\"], oe = [\"align-content\", \"align-items\", \"align-self\", \"all\", \"animation\", \"animation-delay\", \"animation-direction\", \"animation-duration\", \"animation-fill-mode\", \"animation-iteration-count\", \"animation-name\", \"animation-play-state\", \"animation-timing-function\", \"backface-visibility\", \"background\", \"background-attachment\", \"background-blend-mode\", \"background-clip\", \"background-color\", \"background-image\", \"background-origin\", \"background-position\", \"background-repeat\", \"background-size\", \"block-size\", \"border\", \"border-block\", \"border-block-color\", \"border-block-end\", \"border-block-end-color\", \"border-block-end-style\", \"border-block-end-width\", \"border-block-start\", \"border-block-start-color\", \"border-block-start-style\", \"border-block-start-width\", \"border-block-style\", \"border-block-width\", \"border-bottom\", \"border-bottom-color\", \"border-bottom-left-radius\", \"border-bottom-right-radius\", \"border-bottom-style\", \"border-bottom-width\", \"border-collapse\", \"border-color\", \"border-image\", \"border-image-outset\", \"border-image-repeat\", \"border-image-slice\", \"border-image-source\", \"border-image-width\", \"border-inline\", \"border-inline-color\", \"border-inline-end\", \"border-inline-end-color\", \"border-inline-end-style\", \"border-inline-end-width\", \"border-inline-start\", \"border-inline-start-color\", \"border-inline-start-style\", \"border-inline-start-width\", \"border-inline-style\", \"border-inline-width\", \"border-left\", \"border-left-color\", \"border-left-style\", \"border-left-width\", \"border-radius\", \"border-right\", \"border-right-color\", \"border-right-style\", \"border-right-width\", \"border-spacing\", \"border-style\", \"border-top\", \"border-top-color\", \"border-top-left-radius\", \"border-top-right-radius\", \"border-top-style\", \"border-top-width\", \"border-width\", \"bottom\", \"box-decoration-break\", \"box-shadow\", \"box-sizing\", \"break-after\", \"break-before\", \"break-inside\", \"caption-side\", \"caret-color\", \"clear\", \"clip\", \"clip-path\", \"clip-rule\", \"color\", \"column-count\", \"column-fill\", \"column-gap\", \"column-rule\", \"column-rule-color\", \"column-rule-style\", \"column-rule-width\", \"column-span\", \"column-width\", \"columns\", \"contain\", \"content\", \"content-visibility\", \"counter-increment\", \"counter-reset\", \"cue\", \"cue-after\", \"cue-before\", \"cursor\", \"direction\", \"display\", \"empty-cells\", \"filter\", \"flex\", \"flex-basis\", \"flex-direction\", \"flex-flow\", \"flex-grow\", \"flex-shrink\", \"flex-wrap\", \"float\", \"flow\", \"font\", \"font-display\", \"font-family\", \"font-feature-settings\", \"font-kerning\", \"font-language-override\", \"font-size\", \"font-size-adjust\", \"font-smoothing\", \"font-stretch\", \"font-style\", \"font-synthesis\", \"font-variant\", \"font-variant-caps\", \"font-variant-east-asian\", \"font-variant-ligatures\", \"font-variant-numeric\", \"font-variant-position\", \"font-variation-settings\", \"font-weight\", \"gap\", \"glyph-orientation-vertical\", \"grid\", \"grid-area\", \"grid-auto-columns\", \"grid-auto-flow\", \"grid-auto-rows\", \"grid-column\", \"grid-column-end\", \"grid-column-start\", \"grid-gap\", \"grid-row\", \"grid-row-end\", \"grid-row-start\", \"grid-template\", \"grid-template-areas\", \"grid-template-columns\", \"grid-template-rows\", \"hanging-punctuation\", \"height\", \"hyphens\", \"icon\", \"image-orientation\", \"image-rendering\", \"image-resolution\", \"ime-mode\", \"inline-size\", \"isolation\", \"justify-content\", \"left\", \"letter-spacing\", \"line-break\", \"line-height\", \"list-style\", \"list-style-image\", \"list-style-position\", \"list-style-type\", \"margin\", \"margin-block\", \"margin-block-end\", \"margin-block-start\", \"margin-bottom\", \"margin-inline\", \"margin-inline-end\", \"margin-inline-start\", \"margin-left\", \"margin-right\", \"margin-top\", \"marks\", \"mask\", \"mask-border\", \"mask-border-mode\", \"mask-border-outset\", \"mask-border-repeat\", \"mask-border-slice\", \"mask-border-source\", \"mask-border-width\", \"mask-clip\", \"mask-composite\", \"mask-image\", \"mask-mode\", \"mask-origin\", \"mask-position\", \"mask-repeat\", \"mask-size\", \"mask-type\", \"max-block-size\", \"max-height\", \"max-inline-size\", \"max-width\", \"min-block-size\", \"min-height\", \"min-inline-size\", \"min-width\", \"mix-blend-mode\", \"nav-down\", \"nav-index\", \"nav-left\", \"nav-right\", \"nav-up\", \"none\", \"normal\", \"object-fit\", \"object-position\", \"opacity\", \"order\", \"orphans\", \"outline\", \"outline-color\", \"outline-offset\", \"outline-style\", \"outline-width\", \"overflow\", \"overflow-wrap\", \"overflow-x\", \"overflow-y\", \"padding\", \"padding-block\", \"padding-block-end\", \"padding-block-start\", \"padding-bottom\", \"padding-inline\", \"padding-inline-end\", \"padding-inline-start\", \"padding-left\", \"padding-right\", \"padding-top\", \"page-break-after\", \"page-break-before\", \"page-break-inside\", \"pause\", \"pause-after\", \"pause-before\", \"perspective\", \"perspective-origin\", \"pointer-events\", \"position\", \"quotes\", \"resize\", \"rest\", \"rest-after\", \"rest-before\", \"right\", \"row-gap\", \"scroll-margin\", \"scroll-margin-block\", \"scroll-margin-block-end\", \"scroll-margin-block-start\", \"scroll-margin-bottom\", \"scroll-margin-inline\", \"scroll-margin-inline-end\", \"scroll-margin-inline-start\", \"scroll-margin-left\", \"scroll-margin-right\", \"scroll-margin-top\", \"scroll-padding\", \"scroll-padding-block\", \"scroll-padding-block-end\", \"scroll-padding-block-start\", \"scroll-padding-bottom\", \"scroll-padding-inline\", \"scroll-padding-inline-end\", \"scroll-padding-inline-start\", \"scroll-padding-left\", \"scroll-padding-right\", \"scroll-padding-top\", \"scroll-snap-align\", \"scroll-snap-stop\", \"scroll-snap-type\", \"scrollbar-color\", \"scrollbar-gutter\", \"scrollbar-width\", \"shape-image-threshold\", \"shape-margin\", \"shape-outside\", \"speak\", \"speak-as\", \"src\", \"tab-size\", \"table-layout\", \"text-align\", \"text-align-all\", \"text-align-last\", \"text-combine-upright\", \"text-decoration\", \"text-decoration-color\", \"text-decoration-line\", \"text-decoration-style\", \"text-emphasis\", \"text-emphasis-color\", \"text-emphasis-position\", \"text-emphasis-style\", \"text-indent\", \"text-justify\", \"text-orientation\", \"text-overflow\", \"text-rendering\", \"text-shadow\", \"text-transform\", \"text-underline-position\", \"top\", \"transform\", \"transform-box\", \"transform-origin\", \"transform-style\", \"transition\", \"transition-delay\", \"transition-duration\", \"transition-property\", \"transition-timing-function\", \"unicode-bidi\", \"vertical-align\", \"visibility\", \"voice-balance\", \"voice-duration\", \"voice-family\", \"voice-pitch\", \"voice-range\", \"voice-rate\", \"voice-stress\", \"voice-volume\", \"white-space\", \"widows\", \"width\", \"will-change\", \"word-break\", \"word-spacing\", \"word-wrap\", \"writing-mode\", \"z-index\"].reverse(), le = re.concat(se)\n    ; var ce = \"\\\\.([0-9](_*[0-9])*)\", de = \"[0-9a-fA-F](_*[0-9a-fA-F])*\", ge = {\n      className: \"number\", variants: [{\n        begin: `(\\\\b([0-9](_*[0-9])*)((${ce})|\\\\.)?|(${ce}))[eE][+-]?([0-9](_*[0-9])*)[fFdD]?\\\\b`\n      }, { begin: `\\\\b([0-9](_*[0-9])*)((${ce})[fFdD]?\\\\b|\\\\.([fFdD]\\\\b)?)` }, {\n        begin: `(${ce})[fFdD]?\\\\b`\n      }, { begin: \"\\\\b([0-9](_*[0-9])*)[fFdD]\\\\b\" }, {\n        begin: `\\\\b0[xX]((${de})\\\\.?|(${de})?\\\\.(${de}))[pP][+-]?([0-9](_*[0-9])*)[fFdD]?\\\\b`\n      }, { begin: \"\\\\b(0|[1-9](_*[0-9])*)[lL]?\\\\b\" }, { begin: `\\\\b0[xX](${de})[lL]?\\\\b` }, {\n        begin: \"\\\\b0(_*[0-7])*[lL]?\\\\b\"\n      }, { begin: \"\\\\b0[bB][01](_*[01])*[lL]?\\\\b\" }],\n      relevance: 0\n    }; function ue(e, n, t) { return -1 === t ? \"\" : e.replace(n, (a => ue(e, n, t - 1))) }\n  const be = \"[A-Za-z$_][0-9A-Za-z$_]*\", me = [\"as\", \"in\", \"of\", \"if\", \"for\", \"while\", \"finally\", \"var\", \"new\", \"function\", \"do\", \"return\", \"void\", \"else\", \"break\", \"catch\", \"instanceof\", \"with\", \"throw\", \"case\", \"default\", \"try\", \"switch\", \"continue\", \"typeof\", \"delete\", \"let\", \"yield\", \"const\", \"class\", \"debugger\", \"async\", \"await\", \"static\", \"import\", \"from\", \"export\", \"extends\"], pe = [\"true\", \"false\", \"null\", \"undefined\", \"NaN\", \"Infinity\"], _e = [\"Object\", \"Function\", \"Boolean\", \"Symbol\", \"Math\", \"Date\", \"Number\", \"BigInt\", \"String\", \"RegExp\", \"Array\", \"Float32Array\", \"Float64Array\", \"Int8Array\", \"Uint8Array\", \"Uint8ClampedArray\", \"Int16Array\", \"Int32Array\", \"Uint16Array\", \"Uint32Array\", \"BigInt64Array\", \"BigUint64Array\", \"Set\", \"Map\", \"WeakSet\", \"WeakMap\", \"ArrayBuffer\", \"SharedArrayBuffer\", \"Atomics\", \"DataView\", \"JSON\", \"Promise\", \"Generator\", \"GeneratorFunction\", \"AsyncFunction\", \"Reflect\", \"Proxy\", \"Intl\", \"WebAssembly\"], he = [\"Error\", \"EvalError\", \"InternalError\", \"RangeError\", \"ReferenceError\", \"SyntaxError\", \"TypeError\", \"URIError\"], fe = [\"setInterval\", \"setTimeout\", \"clearInterval\", \"clearTimeout\", \"require\", \"exports\", \"eval\", \"isFinite\", \"isNaN\", \"parseFloat\", \"parseInt\", \"decodeURI\", \"decodeURIComponent\", \"encodeURI\", \"encodeURIComponent\", \"escape\", \"unescape\"], Ee = [\"arguments\", \"this\", \"super\", \"console\", \"window\", \"document\", \"localStorage\", \"module\", \"global\"], ye = [].concat(fe, _e, he)\n    ; function we(e) {\n      const n = e.regex, t = be, a = {\n        begin: /<[A-Za-z0-9\\\\._:-]+/,\n        end: /\\/[A-Za-z0-9\\\\._:-]+>|\\/>/, isTrulyOpeningTag: (e, n) => {\n          const t = e[0].length + e.index, a = e.input[t]\n            ; if (\"<\" === a || \",\" === a) return void n.ignoreMatch(); let i\n            ; \">\" === a && (((e, { after: n }) => {\n              const t = \"</\" + e[0].slice(1)\n                ; return -1 !== e.input.indexOf(t, n)\n            })(e, { after: t }) || n.ignoreMatch())\n            ; const r = e.input.substring(t)\n            ; ((i = r.match(/^\\s*=/)) || (i = r.match(/^\\s+extends\\s+/)) && 0 === i.index) && n.ignoreMatch()\n        }\n      }, i = {\n        $pattern: be, keyword: me, literal: pe, built_in: ye, \"variable.language\": Ee\n      }, r = \"\\\\.([0-9](_?[0-9])*)\", s = \"0|[1-9](_?[0-9])*|0[0-7]*[89][0-9]*\", o = {\n        className: \"number\", variants: [{\n          begin: `(\\\\b(${s})((${r})|\\\\.)?|(${r}))[eE][+-]?([0-9](_?[0-9])*)\\\\b`\n        }, {\n          begin: `\\\\b(${s})\\\\b((${r})\\\\b|\\\\.)?|(${r})\\\\b`\n        }, {\n          begin: \"\\\\b(0|[1-9](_?[0-9])*)n\\\\b\"\n        }, {\n          begin: \"\\\\b0[xX][0-9a-fA-F](_?[0-9a-fA-F])*n?\\\\b\"\n        }, {\n          begin: \"\\\\b0[bB][0-1](_?[0-1])*n?\\\\b\"\n        }, { begin: \"\\\\b0[oO][0-7](_?[0-7])*n?\\\\b\" }, {\n          begin: \"\\\\b0[0-7]+n?\\\\b\"\n        }], relevance: 0\n      }, l = {\n        className: \"subst\", begin: \"\\\\$\\\\{\",\n        end: \"\\\\}\", keywords: i, contains: []\n      }, c = {\n        begin: \"html`\", end: \"\", starts: {\n          end: \"`\",\n          returnEnd: !1, contains: [e.BACKSLASH_ESCAPE, l], subLanguage: \"xml\"\n        }\n      }, d = {\n        begin: \"css`\", end: \"\", starts: {\n          end: \"`\", returnEnd: !1,\n          contains: [e.BACKSLASH_ESCAPE, l], subLanguage: \"css\"\n        }\n      }, g = {\n        className: \"string\",\n        begin: \"`\", end: \"`\", contains: [e.BACKSLASH_ESCAPE, l]\n      }, u = {\n        className: \"comment\",\n        variants: [e.COMMENT(/\\/\\*\\*(?!\\/)/, \"\\\\*/\", {\n          relevance: 0, contains: [{\n            begin: \"(?=@[A-Za-z]+)\", relevance: 0, contains: [{\n              className: \"doctag\",\n              begin: \"@[A-Za-z]+\"\n            }, {\n              className: \"type\", begin: \"\\\\{\", end: \"\\\\}\", excludeEnd: !0,\n              excludeBegin: !0, relevance: 0\n            }, {\n              className: \"variable\", begin: t + \"(?=\\\\s*(-)|$)\",\n              endsParent: !0, relevance: 0\n            }, { begin: /(?=[^\\n])\\s/, relevance: 0 }]\n          }]\n        }), e.C_BLOCK_COMMENT_MODE, e.C_LINE_COMMENT_MODE]\n      }, b = [e.APOS_STRING_MODE, e.QUOTE_STRING_MODE, c, d, g, { match: /\\$\\d+/ }, o]\n        ; l.contains = b.concat({\n          begin: /\\{/, end: /\\}/, keywords: i, contains: [\"self\"].concat(b)\n        }); const m = [].concat(u, l.contains), p = m.concat([{\n          begin: /\\(/, end: /\\)/, keywords: i,\n          contains: [\"self\"].concat(m)\n        }]), _ = {\n          className: \"params\", begin: /\\(/, end: /\\)/,\n          excludeBegin: !0, excludeEnd: !0, keywords: i, contains: p\n        }, h = {\n          variants: [{\n            match: [/class/, /\\s+/, t, /\\s+/, /extends/, /\\s+/, n.concat(t, \"(\", n.concat(/\\./, t), \")*\")],\n            scope: { 1: \"keyword\", 3: \"title.class\", 5: \"keyword\", 7: \"title.class.inherited\" }\n          }, {\n            match: [/class/, /\\s+/, t], scope: { 1: \"keyword\", 3: \"title.class\" }\n          }]\n        }, f = {\n          relevance: 0,\n          match: n.either(/\\bJSON/, /\\b[A-Z][a-z]+([A-Z][a-z]*|\\d)*/, /\\b[A-Z]{2,}([A-Z][a-z]+|\\d)+([A-Z][a-z]*)*/, /\\b[A-Z]{2,}[a-z]+([A-Z][a-z]+|\\d)*([A-Z][a-z]*)*/),\n          className: \"title.class\", keywords: { _: [..._e, ...he] }\n        }, E = {\n          variants: [{\n            match: [/function/, /\\s+/, t, /(?=\\s*\\()/]\n          }, { match: [/function/, /\\s*(?=\\()/] }],\n          className: { 1: \"keyword\", 3: \"title.function\" }, label: \"func.def\", contains: [_],\n          illegal: /%/\n        }, y = {\n          match: n.concat(/\\b/, (w = [...fe, \"super\", \"import\"], n.concat(\"(?!\", w.join(\"|\"), \")\")), t, n.lookahead(/\\(/)),\n          className: \"title.function\", relevance: 0\n        }; var w; const N = {\n          begin: n.concat(/\\./, n.lookahead(n.concat(t, /(?![0-9A-Za-z$_(])/))), end: t,\n          excludeBegin: !0, keywords: \"prototype\", className: \"property\", relevance: 0\n        }, v = {\n          match: [/get|set/, /\\s+/, t, /(?=\\()/], className: { 1: \"keyword\", 3: \"title.function\" },\n          contains: [{ begin: /\\(\\)/ }, _]\n        }, O = \"(\\\\([^()]*(\\\\([^()]*(\\\\([^()]*\\\\)[^()]*)*\\\\)[^()]*)*\\\\)|\" + e.UNDERSCORE_IDENT_RE + \")\\\\s*=>\", k = {\n          match: [/const|var|let/, /\\s+/, t, /\\s*/, /=\\s*/, /(async\\s*)?/, n.lookahead(O)],\n          keywords: \"async\", className: { 1: \"keyword\", 3: \"title.function\" }, contains: [_]\n        }\n        ; return {\n          name: \"Javascript\", aliases: [\"js\", \"jsx\", \"mjs\", \"cjs\"], keywords: i, exports: {\n            PARAMS_CONTAINS: p, CLASS_REFERENCE: f\n          }, illegal: /#(?![$_A-z])/,\n          contains: [e.SHEBANG({ label: \"shebang\", binary: \"node\", relevance: 5 }), {\n            label: \"use_strict\", className: \"meta\", relevance: 10,\n            begin: /^\\s*['\"]use (strict|asm)['\"]/\n          }, e.APOS_STRING_MODE, e.QUOTE_STRING_MODE, c, d, g, u, { match: /\\$\\d+/ }, o, f, {\n            className: \"attr\", begin: t + n.lookahead(\":\"), relevance: 0\n          }, k, {\n            begin: \"(\" + e.RE_STARTERS_RE + \"|\\\\b(case|return|throw)\\\\b)\\\\s*\",\n            keywords: \"return throw case\", relevance: 0, contains: [u, e.REGEXP_MODE, {\n              className: \"function\", begin: O, returnBegin: !0, end: \"\\\\s*=>\", contains: [{\n                className: \"params\", variants: [{ begin: e.UNDERSCORE_IDENT_RE, relevance: 0 }, {\n                  className: null, begin: /\\(\\s*\\)/, skip: !0\n                }, {\n                  begin: /\\(/, end: /\\)/, excludeBegin: !0,\n                  excludeEnd: !0, keywords: i, contains: p\n                }]\n              }]\n            }, { begin: /,/, relevance: 0 }, {\n                match: /\\s+/,\n                relevance: 0\n              }, {\n                variants: [{ begin: \"<>\", end: \"</>\" }, {\n                  match: /<[A-Za-z0-9\\\\._:-]+\\s*\\/>/\n                }, {\n                  begin: a.begin,\n                  \"on:begin\": a.isTrulyOpeningTag, end: a.end\n                }], subLanguage: \"xml\", contains: [{\n                  begin: a.begin, end: a.end, skip: !0, contains: [\"self\"]\n                }]\n              }]\n          }, E, {\n            beginKeywords: \"while if switch catch for\"\n          }, {\n            begin: \"\\\\b(?!function)\" + e.UNDERSCORE_IDENT_RE + \"\\\\([^()]*(\\\\([^()]*(\\\\([^()]*\\\\)[^()]*)*\\\\)[^()]*)*\\\\)\\\\s*\\\\{\",\n            returnBegin: !0, label: \"func.def\", contains: [_, e.inherit(e.TITLE_MODE, {\n              begin: t,\n              className: \"title.function\"\n            })]\n          }, { match: /\\.\\.\\./, relevance: 0 }, N, {\n            match: \"\\\\$\" + t,\n            relevance: 0\n          }, {\n            match: [/\\bconstructor(?=\\s*\\()/], className: { 1: \"title.function\" },\n            contains: [_]\n          }, y, {\n            relevance: 0, match: /\\b[A-Z][A-Z_0-9]+\\b/,\n            className: \"variable.constant\"\n          }, h, v, { match: /\\$[(.]/ }]\n        }\n    }\n  const Ne = e => m(/\\b/, e, /\\w$/.test(e) ? /\\b/ : /\\B/), ve = [\"Protocol\", \"Type\"].map(Ne), Oe = [\"init\", \"self\"].map(Ne), ke = [\"Any\", \"Self\"], xe = [\"actor\", \"any\", \"associatedtype\", \"async\", \"await\", /as\\?/, /as!/, \"as\", \"break\", \"case\", \"catch\", \"class\", \"continue\", \"convenience\", \"default\", \"defer\", \"deinit\", \"didSet\", \"distributed\", \"do\", \"dynamic\", \"else\", \"enum\", \"extension\", \"fallthrough\", /fileprivate\\(set\\)/, \"fileprivate\", \"final\", \"for\", \"func\", \"get\", \"guard\", \"if\", \"import\", \"indirect\", \"infix\", /init\\?/, /init!/, \"inout\", /internal\\(set\\)/, \"internal\", \"in\", \"is\", \"isolated\", \"nonisolated\", \"lazy\", \"let\", \"mutating\", \"nonmutating\", /open\\(set\\)/, \"open\", \"operator\", \"optional\", \"override\", \"postfix\", \"precedencegroup\", \"prefix\", /private\\(set\\)/, \"private\", \"protocol\", /public\\(set\\)/, \"public\", \"repeat\", \"required\", \"rethrows\", \"return\", \"set\", \"some\", \"static\", \"struct\", \"subscript\", \"super\", \"switch\", \"throws\", \"throw\", /try\\?/, /try!/, \"try\", \"typealias\", /unowned\\(safe\\)/, /unowned\\(unsafe\\)/, \"unowned\", \"var\", \"weak\", \"where\", \"while\", \"willSet\"], Me = [\"false\", \"nil\", \"true\"], Se = [\"assignment\", \"associativity\", \"higherThan\", \"left\", \"lowerThan\", \"none\", \"right\"], Ae = [\"#colorLiteral\", \"#column\", \"#dsohandle\", \"#else\", \"#elseif\", \"#endif\", \"#error\", \"#file\", \"#fileID\", \"#fileLiteral\", \"#filePath\", \"#function\", \"#if\", \"#imageLiteral\", \"#keyPath\", \"#line\", \"#selector\", \"#sourceLocation\", \"#warn_unqualified_access\", \"#warning\"], Ce = [\"abs\", \"all\", \"any\", \"assert\", \"assertionFailure\", \"debugPrint\", \"dump\", \"fatalError\", \"getVaList\", \"isKnownUniquelyReferenced\", \"max\", \"min\", \"numericCast\", \"pointwiseMax\", \"pointwiseMin\", \"precondition\", \"preconditionFailure\", \"print\", \"readLine\", \"repeatElement\", \"sequence\", \"stride\", \"swap\", \"swift_unboxFromSwiftValueWithType\", \"transcode\", \"type\", \"unsafeBitCast\", \"unsafeDowncast\", \"withExtendedLifetime\", \"withUnsafeMutablePointer\", \"withUnsafePointer\", \"withVaList\", \"withoutActuallyEscaping\", \"zip\"], Te = p(/[/=\\-+!*%<>&|^~?]/, /[\\u00A1-\\u00A7]/, /[\\u00A9\\u00AB]/, /[\\u00AC\\u00AE]/, /[\\u00B0\\u00B1]/, /[\\u00B6\\u00BB\\u00BF\\u00D7\\u00F7]/, /[\\u2016-\\u2017]/, /[\\u2020-\\u2027]/, /[\\u2030-\\u203E]/, /[\\u2041-\\u2053]/, /[\\u2055-\\u205E]/, /[\\u2190-\\u23FF]/, /[\\u2500-\\u2775]/, /[\\u2794-\\u2BFF]/, /[\\u2E00-\\u2E7F]/, /[\\u3001-\\u3003]/, /[\\u3008-\\u3020]/, /[\\u3030]/), Re = p(Te, /[\\u0300-\\u036F]/, /[\\u1DC0-\\u1DFF]/, /[\\u20D0-\\u20FF]/, /[\\uFE00-\\uFE0F]/, /[\\uFE20-\\uFE2F]/), De = m(Te, Re, \"*\"), Ie = p(/[a-zA-Z_]/, /[\\u00A8\\u00AA\\u00AD\\u00AF\\u00B2-\\u00B5\\u00B7-\\u00BA]/, /[\\u00BC-\\u00BE\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u00FF]/, /[\\u0100-\\u02FF\\u0370-\\u167F\\u1681-\\u180D\\u180F-\\u1DBF]/, /[\\u1E00-\\u1FFF]/, /[\\u200B-\\u200D\\u202A-\\u202E\\u203F-\\u2040\\u2054\\u2060-\\u206F]/, /[\\u2070-\\u20CF\\u2100-\\u218F\\u2460-\\u24FF\\u2776-\\u2793]/, /[\\u2C00-\\u2DFF\\u2E80-\\u2FFF]/, /[\\u3004-\\u3007\\u3021-\\u302F\\u3031-\\u303F\\u3040-\\uD7FF]/, /[\\uF900-\\uFD3D\\uFD40-\\uFDCF\\uFDF0-\\uFE1F\\uFE30-\\uFE44]/, /[\\uFE47-\\uFEFE\\uFF00-\\uFFFD]/), Le = p(Ie, /\\d/, /[\\u0300-\\u036F\\u1DC0-\\u1DFF\\u20D0-\\u20FF\\uFE20-\\uFE2F]/), Be = m(Ie, Le, \"*\"), $e = m(/[A-Z]/, Le, \"*\"), ze = [\"autoclosure\", m(/convention\\(/, p(\"swift\", \"block\", \"c\"), /\\)/), \"discardableResult\", \"dynamicCallable\", \"dynamicMemberLookup\", \"escaping\", \"frozen\", \"GKInspectable\", \"IBAction\", \"IBDesignable\", \"IBInspectable\", \"IBOutlet\", \"IBSegueAction\", \"inlinable\", \"main\", \"nonobjc\", \"NSApplicationMain\", \"NSCopying\", \"NSManaged\", m(/objc\\(/, Be, /\\)/), \"objc\", \"objcMembers\", \"propertyWrapper\", \"requires_stored_property_inits\", \"resultBuilder\", \"testable\", \"UIApplicationMain\", \"unknown\", \"usableFromInline\"], Fe = [\"iOS\", \"iOSApplicationExtension\", \"macOS\", \"macOSApplicationExtension\", \"macCatalyst\", \"macCatalystApplicationExtension\", \"watchOS\", \"watchOSApplicationExtension\", \"tvOS\", \"tvOSApplicationExtension\", \"swift\"]\n    ; var Ue = Object.freeze({\n      __proto__: null, grmr_bash: e => {\n        const n = e.regex, t = {}, a = {\n          begin: /\\$\\{/, end: /\\}/, contains: [\"self\", { begin: /:-/, contains: [t] }]\n        }\n          ; Object.assign(t, {\n            className: \"variable\", variants: [{\n              begin: n.concat(/\\$[\\w\\d#@][\\w\\d_]*/, \"(?![\\\\w\\\\d])(?![$])\")\n            }, a]\n          }); const i = {\n            className: \"subst\", begin: /\\$\\(/, end: /\\)/, contains: [e.BACKSLASH_ESCAPE]\n          }, r = {\n            begin: /<<-?\\s*(?=\\w+)/, starts: {\n              contains: [e.END_SAME_AS_BEGIN({\n                begin: /(\\w+)/,\n                end: /(\\w+)/, className: \"string\"\n              })]\n            }\n          }, s = {\n            className: \"string\", begin: /\"/, end: /\"/,\n            contains: [e.BACKSLASH_ESCAPE, t, i]\n          }; i.contains.push(s); const o = {\n            begin: /\\$?\\(\\(/,\n            end: /\\)\\)/, contains: [{ begin: /\\d+#[0-9a-f]+/, className: \"number\" }, e.NUMBER_MODE, t]\n          }, l = e.SHEBANG({\n            binary: \"(fish|bash|zsh|sh|csh|ksh|tcsh|dash|scsh)\", relevance: 10\n          }), c = {\n            className: \"function\", begin: /\\w[\\w\\d_]*\\s*\\(\\s*\\)\\s*\\{/, returnBegin: !0,\n            contains: [e.inherit(e.TITLE_MODE, { begin: /\\w[\\w\\d_]*/ })], relevance: 0\n          }; return {\n            name: \"Bash\", aliases: [\"sh\"], keywords: {\n              $pattern: /\\b[a-z][a-z0-9._-]+\\b/,\n              keyword: [\"if\", \"then\", \"else\", \"elif\", \"fi\", \"for\", \"while\", \"in\", \"do\", \"done\", \"case\", \"esac\", \"function\"],\n              literal: [\"true\", \"false\"],\n              built_in: [\"break\", \"cd\", \"continue\", \"eval\", \"exec\", \"exit\", \"export\", \"getopts\", \"hash\", \"pwd\", \"readonly\", \"return\", \"shift\", \"test\", \"times\", \"trap\", \"umask\", \"unset\", \"alias\", \"bind\", \"builtin\", \"caller\", \"command\", \"declare\", \"echo\", \"enable\", \"help\", \"let\", \"local\", \"logout\", \"mapfile\", \"printf\", \"read\", \"readarray\", \"source\", \"type\", \"typeset\", \"ulimit\", \"unalias\", \"set\", \"shopt\", \"autoload\", \"bg\", \"bindkey\", \"bye\", \"cap\", \"chdir\", \"clone\", \"comparguments\", \"compcall\", \"compctl\", \"compdescribe\", \"compfiles\", \"compgroups\", \"compquote\", \"comptags\", \"comptry\", \"compvalues\", \"dirs\", \"disable\", \"disown\", \"echotc\", \"echoti\", \"emulate\", \"fc\", \"fg\", \"float\", \"functions\", \"getcap\", \"getln\", \"history\", \"integer\", \"jobs\", \"kill\", \"limit\", \"log\", \"noglob\", \"popd\", \"print\", \"pushd\", \"pushln\", \"rehash\", \"sched\", \"setcap\", \"setopt\", \"stat\", \"suspend\", \"ttyctl\", \"unfunction\", \"unhash\", \"unlimit\", \"unsetopt\", \"vared\", \"wait\", \"whence\", \"where\", \"which\", \"zcompile\", \"zformat\", \"zftp\", \"zle\", \"zmodload\", \"zparseopts\", \"zprof\", \"zpty\", \"zregexparse\", \"zsocket\", \"zstyle\", \"ztcp\", \"chcon\", \"chgrp\", \"chown\", \"chmod\", \"cp\", \"dd\", \"df\", \"dir\", \"dircolors\", \"ln\", \"ls\", \"mkdir\", \"mkfifo\", \"mknod\", \"mktemp\", \"mv\", \"realpath\", \"rm\", \"rmdir\", \"shred\", \"sync\", \"touch\", \"truncate\", \"vdir\", \"b2sum\", \"base32\", \"base64\", \"cat\", \"cksum\", \"comm\", \"csplit\", \"cut\", \"expand\", \"fmt\", \"fold\", \"head\", \"join\", \"md5sum\", \"nl\", \"numfmt\", \"od\", \"paste\", \"ptx\", \"pr\", \"sha1sum\", \"sha224sum\", \"sha256sum\", \"sha384sum\", \"sha512sum\", \"shuf\", \"sort\", \"split\", \"sum\", \"tac\", \"tail\", \"tr\", \"tsort\", \"unexpand\", \"uniq\", \"wc\", \"arch\", \"basename\", \"chroot\", \"date\", \"dirname\", \"du\", \"echo\", \"env\", \"expr\", \"factor\", \"groups\", \"hostid\", \"id\", \"link\", \"logname\", \"nice\", \"nohup\", \"nproc\", \"pathchk\", \"pinky\", \"printenv\", \"printf\", \"pwd\", \"readlink\", \"runcon\", \"seq\", \"sleep\", \"stat\", \"stdbuf\", \"stty\", \"tee\", \"test\", \"timeout\", \"tty\", \"uname\", \"unlink\", \"uptime\", \"users\", \"who\", \"whoami\", \"yes\"]\n            }, contains: [l, e.SHEBANG(), c, o, e.HASH_COMMENT_MODE, r, { match: /(\\/[a-z._-]+)+/ }, s, {\n              className: \"\", begin: /\\\\\"/\n            }, { className: \"string\", begin: /'/, end: /'/ }, t]\n          }\n      },\n      grmr_c: e => {\n        const n = e.regex, t = e.COMMENT(\"//\", \"$\", {\n          contains: [{ begin: /\\\\\\n/ }]\n        }), a = \"[a-zA-Z_]\\\\w*::\", i = \"(decltype\\\\(auto\\\\)|\" + n.optional(a) + \"[a-zA-Z_]\\\\w*\" + n.optional(\"<[^<>]+>\") + \")\", r = {\n          className: \"type\", variants: [{ begin: \"\\\\b[a-z\\\\d_]*_t\\\\b\" }, {\n            match: /\\batomic_[a-z]{3,6}\\b/\n          }]\n        }, s = {\n          className: \"string\", variants: [{\n            begin: '(u8?|U|L)?\"', end: '\"', illegal: \"\\\\n\", contains: [e.BACKSLASH_ESCAPE]\n          }, {\n            begin: \"(u8?|U|L)?'(\\\\\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4,8}|[0-7]{3}|\\\\S)|.)\",\n            end: \"'\", illegal: \".\"\n          }, e.END_SAME_AS_BEGIN({\n            begin: /(?:u8?|U|L)?R\"([^()\\\\ ]{0,16})\\(/, end: /\\)([^()\\\\ ]{0,16})\"/\n          })]\n        }, o = {\n          className: \"number\", variants: [{ begin: \"\\\\b(0b[01']+)\" }, {\n            begin: \"(-?)\\\\b([\\\\d']+(\\\\.[\\\\d']*)?|\\\\.[\\\\d']+)((ll|LL|l|L)(u|U)?|(u|U)(ll|LL|l|L)?|f|F|b|B)\"\n          }, {\n            begin: \"(-?)(\\\\b0[xX][a-fA-F0-9']+|(\\\\b[\\\\d']+(\\\\.[\\\\d']*)?|\\\\.[\\\\d']+)([eE][-+]?[\\\\d']+)?)\"\n          }], relevance: 0\n        }, l = {\n          className: \"meta\", begin: /#\\s*[a-z]+\\b/, end: /$/, keywords: {\n            keyword: \"if else elif endif define undef warning error line pragma _Pragma ifdef ifndef include\"\n          }, contains: [{ begin: /\\\\\\n/, relevance: 0 }, e.inherit(s, { className: \"string\" }), {\n            className: \"string\", begin: /<.*?>/\n          }, t, e.C_BLOCK_COMMENT_MODE]\n        }, c = {\n          className: \"title\", begin: n.optional(a) + e.IDENT_RE, relevance: 0\n        }, d = n.optional(a) + e.IDENT_RE + \"\\\\s*\\\\(\", g = {\n          keyword: [\"asm\", \"auto\", \"break\", \"case\", \"continue\", \"default\", \"do\", \"else\", \"enum\", \"extern\", \"for\", \"fortran\", \"goto\", \"if\", \"inline\", \"register\", \"restrict\", \"return\", \"sizeof\", \"struct\", \"switch\", \"typedef\", \"union\", \"volatile\", \"while\", \"_Alignas\", \"_Alignof\", \"_Atomic\", \"_Generic\", \"_Noreturn\", \"_Static_assert\", \"_Thread_local\", \"alignas\", \"alignof\", \"noreturn\", \"static_assert\", \"thread_local\", \"_Pragma\"],\n          type: [\"float\", \"double\", \"signed\", \"unsigned\", \"int\", \"short\", \"long\", \"char\", \"void\", \"_Bool\", \"_Complex\", \"_Imaginary\", \"_Decimal32\", \"_Decimal64\", \"_Decimal128\", \"const\", \"static\", \"complex\", \"bool\", \"imaginary\"],\n          literal: \"true false NULL\",\n          built_in: \"std string wstring cin cout cerr clog stdin stdout stderr stringstream istringstream ostringstream auto_ptr deque list queue stack vector map set pair bitset multiset multimap unordered_set unordered_map unordered_multiset unordered_multimap priority_queue make_pair array shared_ptr abort terminate abs acos asin atan2 atan calloc ceil cosh cos exit exp fabs floor fmod fprintf fputs free frexp fscanf future isalnum isalpha iscntrl isdigit isgraph islower isprint ispunct isspace isupper isxdigit tolower toupper labs ldexp log10 log malloc realloc memchr memcmp memcpy memset modf pow printf putchar puts scanf sinh sin snprintf sprintf sqrt sscanf strcat strchr strcmp strcpy strcspn strlen strncat strncmp strncpy strpbrk strrchr strspn strstr tanh tan vfprintf vprintf vsprintf endl initializer_list unique_ptr\"\n        }, u = [l, r, t, e.C_BLOCK_COMMENT_MODE, o, s], b = {\n          variants: [{ begin: /=/, end: /;/ }, {\n            begin: /\\(/, end: /\\)/\n          }, { beginKeywords: \"new throw return else\", end: /;/ }],\n          keywords: g, contains: u.concat([{\n            begin: /\\(/, end: /\\)/, keywords: g,\n            contains: u.concat([\"self\"]), relevance: 0\n          }]), relevance: 0\n        }, m = {\n          begin: \"(\" + i + \"[\\\\*&\\\\s]+)+\" + d, returnBegin: !0, end: /[{;=]/, excludeEnd: !0,\n          keywords: g, illegal: /[^\\w\\s\\*&:<>.]/, contains: [{\n            begin: \"decltype\\\\(auto\\\\)\",\n            keywords: g, relevance: 0\n          }, {\n            begin: d, returnBegin: !0, contains: [e.inherit(c, {\n              className: \"title.function\"\n            })], relevance: 0\n          }, { relevance: 0, match: /,/ }, {\n            className: \"params\", begin: /\\(/, end: /\\)/, keywords: g, relevance: 0,\n            contains: [t, e.C_BLOCK_COMMENT_MODE, s, o, r, {\n              begin: /\\(/, end: /\\)/, keywords: g,\n              relevance: 0, contains: [\"self\", t, e.C_BLOCK_COMMENT_MODE, s, o, r]\n            }]\n          }, r, t, e.C_BLOCK_COMMENT_MODE, l]\n        }; return {\n          name: \"C\", aliases: [\"h\"], keywords: g,\n          disableAutodetect: !0, illegal: \"</\", contains: [].concat(b, m, u, [l, {\n            begin: e.IDENT_RE + \"::\", keywords: g\n          }, {\n              className: \"class\",\n              beginKeywords: \"enum class struct union\", end: /[{;:<>=]/, contains: [{\n                beginKeywords: \"final class struct\"\n              }, e.TITLE_MODE]\n            }]), exports: {\n              preprocessor: l,\n              strings: s, keywords: g\n            }\n        }\n      }, grmr_cpp: e => {\n        const n = e.regex, t = e.COMMENT(\"//\", \"$\", {\n          contains: [{ begin: /\\\\\\n/ }]\n        }), a = \"[a-zA-Z_]\\\\w*::\", i = \"(?!struct)(decltype\\\\(auto\\\\)|\" + n.optional(a) + \"[a-zA-Z_]\\\\w*\" + n.optional(\"<[^<>]+>\") + \")\", r = {\n          className: \"type\", begin: \"\\\\b[a-z\\\\d_]*_t\\\\b\"\n        }, s = {\n          className: \"string\", variants: [{\n            begin: '(u8?|U|L)?\"', end: '\"', illegal: \"\\\\n\", contains: [e.BACKSLASH_ESCAPE]\n          }, {\n            begin: \"(u8?|U|L)?'(\\\\\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4,8}|[0-7]{3}|\\\\S)|.)\",\n            end: \"'\", illegal: \".\"\n          }, e.END_SAME_AS_BEGIN({\n            begin: /(?:u8?|U|L)?R\"([^()\\\\ ]{0,16})\\(/, end: /\\)([^()\\\\ ]{0,16})\"/\n          })]\n        }, o = {\n          className: \"number\", variants: [{ begin: \"\\\\b(0b[01']+)\" }, {\n            begin: \"(-?)\\\\b([\\\\d']+(\\\\.[\\\\d']*)?|\\\\.[\\\\d']+)((ll|LL|l|L)(u|U)?|(u|U)(ll|LL|l|L)?|f|F|b|B)\"\n          }, {\n            begin: \"(-?)(\\\\b0[xX][a-fA-F0-9']+|(\\\\b[\\\\d']+(\\\\.[\\\\d']*)?|\\\\.[\\\\d']+)([eE][-+]?[\\\\d']+)?)\"\n          }], relevance: 0\n        }, l = {\n          className: \"meta\", begin: /#\\s*[a-z]+\\b/, end: /$/, keywords: {\n            keyword: \"if else elif endif define undef warning error line pragma _Pragma ifdef ifndef include\"\n          }, contains: [{ begin: /\\\\\\n/, relevance: 0 }, e.inherit(s, { className: \"string\" }), {\n            className: \"string\", begin: /<.*?>/\n          }, t, e.C_BLOCK_COMMENT_MODE]\n        }, c = {\n          className: \"title\", begin: n.optional(a) + e.IDENT_RE, relevance: 0\n        }, d = n.optional(a) + e.IDENT_RE + \"\\\\s*\\\\(\", g = {\n          type: [\"bool\", \"char\", \"char16_t\", \"char32_t\", \"char8_t\", \"double\", \"float\", \"int\", \"long\", \"short\", \"void\", \"wchar_t\", \"unsigned\", \"signed\", \"const\", \"static\"],\n          keyword: [\"alignas\", \"alignof\", \"and\", \"and_eq\", \"asm\", \"atomic_cancel\", \"atomic_commit\", \"atomic_noexcept\", \"auto\", \"bitand\", \"bitor\", \"break\", \"case\", \"catch\", \"class\", \"co_await\", \"co_return\", \"co_yield\", \"compl\", \"concept\", \"const_cast|10\", \"consteval\", \"constexpr\", \"constinit\", \"continue\", \"decltype\", \"default\", \"delete\", \"do\", \"dynamic_cast|10\", \"else\", \"enum\", \"explicit\", \"export\", \"extern\", \"false\", \"final\", \"for\", \"friend\", \"goto\", \"if\", \"import\", \"inline\", \"module\", \"mutable\", \"namespace\", \"new\", \"noexcept\", \"not\", \"not_eq\", \"nullptr\", \"operator\", \"or\", \"or_eq\", \"override\", \"private\", \"protected\", \"public\", \"reflexpr\", \"register\", \"reinterpret_cast|10\", \"requires\", \"return\", \"sizeof\", \"static_assert\", \"static_cast|10\", \"struct\", \"switch\", \"synchronized\", \"template\", \"this\", \"thread_local\", \"throw\", \"transaction_safe\", \"transaction_safe_dynamic\", \"true\", \"try\", \"typedef\", \"typeid\", \"typename\", \"union\", \"using\", \"virtual\", \"volatile\", \"while\", \"xor\", \"xor_eq\"],\n          literal: [\"NULL\", \"false\", \"nullopt\", \"nullptr\", \"true\"], built_in: [\"_Pragma\"],\n          _type_hints: [\"any\", \"auto_ptr\", \"barrier\", \"binary_semaphore\", \"bitset\", \"complex\", \"condition_variable\", \"condition_variable_any\", \"counting_semaphore\", \"deque\", \"false_type\", \"future\", \"imaginary\", \"initializer_list\", \"istringstream\", \"jthread\", \"latch\", \"lock_guard\", \"multimap\", \"multiset\", \"mutex\", \"optional\", \"ostringstream\", \"packaged_task\", \"pair\", \"promise\", \"priority_queue\", \"queue\", \"recursive_mutex\", \"recursive_timed_mutex\", \"scoped_lock\", \"set\", \"shared_future\", \"shared_lock\", \"shared_mutex\", \"shared_timed_mutex\", \"shared_ptr\", \"stack\", \"string_view\", \"stringstream\", \"timed_mutex\", \"thread\", \"true_type\", \"tuple\", \"unique_lock\", \"unique_ptr\", \"unordered_map\", \"unordered_multimap\", \"unordered_multiset\", \"unordered_set\", \"variant\", \"vector\", \"weak_ptr\", \"wstring\", \"wstring_view\"]\n        }, u = {\n          className: \"function.dispatch\", relevance: 0, keywords: {\n            _hint: [\"abort\", \"abs\", \"acos\", \"apply\", \"as_const\", \"asin\", \"atan\", \"atan2\", \"calloc\", \"ceil\", \"cerr\", \"cin\", \"clog\", \"cos\", \"cosh\", \"cout\", \"declval\", \"endl\", \"exchange\", \"exit\", \"exp\", \"fabs\", \"floor\", \"fmod\", \"forward\", \"fprintf\", \"fputs\", \"free\", \"frexp\", \"fscanf\", \"future\", \"invoke\", \"isalnum\", \"isalpha\", \"iscntrl\", \"isdigit\", \"isgraph\", \"islower\", \"isprint\", \"ispunct\", \"isspace\", \"isupper\", \"isxdigit\", \"labs\", \"launder\", \"ldexp\", \"log\", \"log10\", \"make_pair\", \"make_shared\", \"make_shared_for_overwrite\", \"make_tuple\", \"make_unique\", \"malloc\", \"memchr\", \"memcmp\", \"memcpy\", \"memset\", \"modf\", \"move\", \"pow\", \"printf\", \"putchar\", \"puts\", \"realloc\", \"scanf\", \"sin\", \"sinh\", \"snprintf\", \"sprintf\", \"sqrt\", \"sscanf\", \"std\", \"stderr\", \"stdin\", \"stdout\", \"strcat\", \"strchr\", \"strcmp\", \"strcpy\", \"strcspn\", \"strlen\", \"strncat\", \"strncmp\", \"strncpy\", \"strpbrk\", \"strrchr\", \"strspn\", \"strstr\", \"swap\", \"tan\", \"tanh\", \"terminate\", \"to_underlying\", \"tolower\", \"toupper\", \"vfprintf\", \"visit\", \"vprintf\", \"vsprintf\"]\n          },\n          begin: n.concat(/\\b/, /(?!decltype)/, /(?!if)/, /(?!for)/, /(?!switch)/, /(?!while)/, e.IDENT_RE, n.lookahead(/(<[^<>]+>|)\\s*\\(/))\n        }, b = [u, l, r, t, e.C_BLOCK_COMMENT_MODE, o, s], m = {\n          variants: [{ begin: /=/, end: /;/ }, {\n            begin: /\\(/, end: /\\)/\n          }, { beginKeywords: \"new throw return else\", end: /;/ }],\n          keywords: g, contains: b.concat([{\n            begin: /\\(/, end: /\\)/, keywords: g,\n            contains: b.concat([\"self\"]), relevance: 0\n          }]), relevance: 0\n        }, p = {\n          className: \"function\",\n          begin: \"(\" + i + \"[\\\\*&\\\\s]+)+\" + d, returnBegin: !0, end: /[{;=]/, excludeEnd: !0,\n          keywords: g, illegal: /[^\\w\\s\\*&:<>.]/, contains: [{\n            begin: \"decltype\\\\(auto\\\\)\",\n            keywords: g, relevance: 0\n          }, { begin: d, returnBegin: !0, contains: [c], relevance: 0 }, {\n            begin: /::/, relevance: 0\n          }, { begin: /:/, endsWithParent: !0, contains: [s, o] }, {\n            relevance: 0, match: /,/\n          }, {\n            className: \"params\", begin: /\\(/, end: /\\)/, keywords: g,\n            relevance: 0, contains: [t, e.C_BLOCK_COMMENT_MODE, s, o, r, {\n              begin: /\\(/, end: /\\)/,\n              keywords: g, relevance: 0, contains: [\"self\", t, e.C_BLOCK_COMMENT_MODE, s, o, r]\n            }]\n          }, r, t, e.C_BLOCK_COMMENT_MODE, l]\n        }; return {\n          name: \"C++\",\n          aliases: [\"cc\", \"c++\", \"h++\", \"hpp\", \"hh\", \"hxx\", \"cxx\"], keywords: g, illegal: \"</\",\n          classNameAliases: { \"function.dispatch\": \"built_in\" },\n          contains: [].concat(m, p, u, b, [l, {\n            begin: \"\\\\b(deque|list|queue|priority_queue|pair|stack|vector|map|set|bitset|multiset|multimap|unordered_map|unordered_set|unordered_multiset|unordered_multimap|array|tuple|optional|variant|function)\\\\s*<(?!<)\",\n            end: \">\", keywords: g, contains: [\"self\", r]\n          }, { begin: e.IDENT_RE + \"::\", keywords: g }, {\n              match: [/\\b(?:enum(?:\\s+(?:class|struct))?|class|struct|union)/, /\\s+/, /\\w+/],\n              className: { 1: \"keyword\", 3: \"title.class\" }\n            }])\n        }\n      }, grmr_csharp: e => {\n        const n = {\n          keyword: [\"abstract\", \"as\", \"base\", \"break\", \"case\", \"catch\", \"class\", \"const\", \"continue\", \"do\", \"else\", \"event\", \"explicit\", \"extern\", \"finally\", \"fixed\", \"for\", \"foreach\", \"goto\", \"if\", \"implicit\", \"in\", \"interface\", \"internal\", \"is\", \"lock\", \"namespace\", \"new\", \"operator\", \"out\", \"override\", \"params\", \"private\", \"protected\", \"public\", \"readonly\", \"record\", \"ref\", \"return\", \"scoped\", \"sealed\", \"sizeof\", \"stackalloc\", \"static\", \"struct\", \"switch\", \"this\", \"throw\", \"try\", \"typeof\", \"unchecked\", \"unsafe\", \"using\", \"virtual\", \"void\", \"volatile\", \"while\"].concat([\"add\", \"alias\", \"and\", \"ascending\", \"async\", \"await\", \"by\", \"descending\", \"equals\", \"from\", \"get\", \"global\", \"group\", \"init\", \"into\", \"join\", \"let\", \"nameof\", \"not\", \"notnull\", \"on\", \"or\", \"orderby\", \"partial\", \"remove\", \"select\", \"set\", \"unmanaged\", \"value|0\", \"var\", \"when\", \"where\", \"with\", \"yield\"]),\n          built_in: [\"bool\", \"byte\", \"char\", \"decimal\", \"delegate\", \"double\", \"dynamic\", \"enum\", \"float\", \"int\", \"long\", \"nint\", \"nuint\", \"object\", \"sbyte\", \"short\", \"string\", \"ulong\", \"uint\", \"ushort\"],\n          literal: [\"default\", \"false\", \"null\", \"true\"]\n        }, t = e.inherit(e.TITLE_MODE, {\n          begin: \"[a-zA-Z](\\\\.?\\\\w)*\"\n        }), a = {\n          className: \"number\", variants: [{\n            begin: \"\\\\b(0b[01']+)\"\n          }, {\n            begin: \"(-?)\\\\b([\\\\d']+(\\\\.[\\\\d']*)?|\\\\.[\\\\d']+)(u|U|l|L|ul|UL|f|F|b|B)\"\n          }, {\n            begin: \"(-?)(\\\\b0[xX][a-fA-F0-9']+|(\\\\b[\\\\d']+(\\\\.[\\\\d']*)?|\\\\.[\\\\d']+)([eE][-+]?[\\\\d']+)?)\"\n          }], relevance: 0\n        }, i = {\n          className: \"string\", begin: '@\"', end: '\"', contains: [{ begin: '\"\"' }]\n        }, r = e.inherit(i, { illegal: /\\n/ }), s = {\n          className: \"subst\", begin: /\\{/, end: /\\}/,\n          keywords: n\n        }, o = e.inherit(s, { illegal: /\\n/ }), l = {\n          className: \"string\", begin: /\\$\"/,\n          end: '\"', illegal: /\\n/, contains: [{ begin: /\\{\\{/ }, {\n            begin: /\\}\\}/\n          }, e.BACKSLASH_ESCAPE, o]\n        }, c = {\n          className: \"string\", begin: /\\$@\"/, end: '\"', contains: [{\n            begin: /\\{\\{/\n          }, { begin: /\\}\\}/ }, { begin: '\"\"' }, s]\n        }, d = e.inherit(c, {\n          illegal: /\\n/,\n          contains: [{ begin: /\\{\\{/ }, { begin: /\\}\\}/ }, { begin: '\"\"' }, o]\n        })\n          ; s.contains = [c, l, i, e.APOS_STRING_MODE, e.QUOTE_STRING_MODE, a, e.C_BLOCK_COMMENT_MODE],\n            o.contains = [d, l, r, e.APOS_STRING_MODE, e.QUOTE_STRING_MODE, a, e.inherit(e.C_BLOCK_COMMENT_MODE, {\n              illegal: /\\n/\n            })]; const g = {\n              variants: [c, l, i, e.APOS_STRING_MODE, e.QUOTE_STRING_MODE]\n            }, u = {\n              begin: \"<\", end: \">\", contains: [{ beginKeywords: \"in out\" }, t]\n            }, b = e.IDENT_RE + \"(<\" + e.IDENT_RE + \"(\\\\s*,\\\\s*\" + e.IDENT_RE + \")*>)?(\\\\[\\\\])?\", m = {\n              begin: \"@\" + e.IDENT_RE, relevance: 0\n            }; return {\n              name: \"C#\", aliases: [\"cs\", \"c#\"],\n              keywords: n, illegal: /::/, contains: [e.COMMENT(\"///\", \"$\", {\n                returnBegin: !0,\n                contains: [{\n                  className: \"doctag\", variants: [{ begin: \"///\", relevance: 0 }, {\n                    begin: \"\\x3c!--|--\\x3e\"\n                  }, { begin: \"</?\", end: \">\" }]\n                }]\n              }), e.C_LINE_COMMENT_MODE, e.C_BLOCK_COMMENT_MODE, {\n                className: \"meta\", begin: \"#\",\n                end: \"$\", keywords: {\n                  keyword: \"if else elif endif define undef warning error line region endregion pragma checksum\"\n                }\n              }, g, a, {\n                beginKeywords: \"class interface\", relevance: 0, end: /[{;=]/,\n                illegal: /[^\\s:,]/, contains: [{\n                  beginKeywords: \"where class\"\n                }, t, u, e.C_LINE_COMMENT_MODE, e.C_BLOCK_COMMENT_MODE]\n              }, {\n                beginKeywords: \"namespace\",\n                relevance: 0, end: /[{;=]/, illegal: /[^\\s:]/,\n                contains: [t, e.C_LINE_COMMENT_MODE, e.C_BLOCK_COMMENT_MODE]\n              }, {\n                beginKeywords: \"record\", relevance: 0, end: /[{;=]/, illegal: /[^\\s:]/,\n                contains: [t, u, e.C_LINE_COMMENT_MODE, e.C_BLOCK_COMMENT_MODE]\n              }, {\n                className: \"meta\",\n                begin: \"^\\\\s*\\\\[(?=[\\\\w])\", excludeBegin: !0, end: \"\\\\]\", excludeEnd: !0, contains: [{\n                  className: \"string\", begin: /\"/, end: /\"/\n                }]\n              }, {\n                beginKeywords: \"new return throw await else\", relevance: 0\n              }, {\n                className: \"function\",\n                begin: \"(\" + b + \"\\\\s+)+\" + e.IDENT_RE + \"\\\\s*(<[^=]+>\\\\s*)?\\\\(\", returnBegin: !0,\n                end: /\\s*[{;=]/, excludeEnd: !0, keywords: n, contains: [{\n                  beginKeywords: \"public private protected static internal protected abstract async extern override unsafe virtual new sealed partial\",\n                  relevance: 0\n                }, {\n                  begin: e.IDENT_RE + \"\\\\s*(<[^=]+>\\\\s*)?\\\\(\", returnBegin: !0,\n                  contains: [e.TITLE_MODE, u], relevance: 0\n                }, { match: /\\(\\)/ }, {\n                  className: \"params\",\n                  begin: /\\(/, end: /\\)/, excludeBegin: !0, excludeEnd: !0, keywords: n, relevance: 0,\n                  contains: [g, a, e.C_BLOCK_COMMENT_MODE]\n                }, e.C_LINE_COMMENT_MODE, e.C_BLOCK_COMMENT_MODE]\n              }, m]\n            }\n      }, grmr_css: e => {\n        const n = e.regex, t = te(e), a = [e.APOS_STRING_MODE, e.QUOTE_STRING_MODE]; return {\n          name: \"CSS\", case_insensitive: !0, illegal: /[=|'\\$]/, keywords: {\n            keyframePosition: \"from to\"\n          }, classNameAliases: { keyframePosition: \"selector-tag\" },\n          contains: [t.BLOCK_COMMENT, {\n            begin: /-(webkit|moz|ms|o)-(?=[a-z])/\n          }, t.CSS_NUMBER_MODE, {\n            className: \"selector-id\", begin: /#[A-Za-z0-9_-]+/, relevance: 0\n          }, {\n            className: \"selector-class\", begin: \"\\\\.[a-zA-Z-][a-zA-Z0-9_-]*\", relevance: 0\n          }, t.ATTRIBUTE_SELECTOR_MODE, {\n            className: \"selector-pseudo\", variants: [{\n              begin: \":(\" + re.join(\"|\") + \")\"\n            }, { begin: \":(:)?(\" + se.join(\"|\") + \")\" }]\n          }, t.CSS_VARIABLE, { className: \"attribute\", begin: \"\\\\b(\" + oe.join(\"|\") + \")\\\\b\" }, {\n            begin: /:/, end: /[;}{]/,\n            contains: [t.BLOCK_COMMENT, t.HEXCOLOR, t.IMPORTANT, t.CSS_NUMBER_MODE, ...a, {\n              begin: /(url|data-uri)\\(/, end: /\\)/, relevance: 0, keywords: {\n                built_in: \"url data-uri\"\n              }, contains: [...a, {\n                className: \"string\", begin: /[^)]/, endsWithParent: !0,\n                excludeEnd: !0\n              }]\n            }, t.FUNCTION_DISPATCH]\n          }, {\n            begin: n.lookahead(/@/), end: \"[{;]\",\n            relevance: 0, illegal: /:/, contains: [{\n              className: \"keyword\", begin: /@-?\\w[\\w]*(-\\w+)*/\n            }, {\n              begin: /\\s/, endsWithParent: !0, excludeEnd: !0, relevance: 0, keywords: {\n                $pattern: /[a-z-]+/, keyword: \"and or not only\", attribute: ie.join(\" \")\n              }, contains: [{\n                begin: /[a-z-]+(?=:)/, className: \"attribute\"\n              }, ...a, t.CSS_NUMBER_MODE]\n            }]\n          }, {\n            className: \"selector-tag\", begin: \"\\\\b(\" + ae.join(\"|\") + \")\\\\b\"\n          }]\n        }\n      }, grmr_diff: e => {\n        const n = e.regex; return {\n          name: \"Diff\", aliases: [\"patch\"], contains: [{\n            className: \"meta\", relevance: 10,\n            match: n.either(/^@@ +-\\d+,\\d+ +\\+\\d+,\\d+ +@@/, /^\\*\\*\\* +\\d+,\\d+ +\\*\\*\\*\\*$/, /^--- +\\d+,\\d+ +----$/)\n          }, {\n            className: \"comment\", variants: [{\n              begin: n.either(/Index: /, /^index/, /={3,}/, /^-{3}/, /^\\*{3} /, /^\\+{3}/, /^diff --git/),\n              end: /$/\n            }, { match: /^\\*{15}$/ }]\n          }, { className: \"addition\", begin: /^\\+/, end: /$/ }, {\n            className: \"deletion\", begin: /^-/, end: /$/\n          }, {\n            className: \"addition\", begin: /^!/,\n            end: /$/\n          }]\n        }\n      }, grmr_go: e => {\n        const n = {\n          keyword: [\"break\", \"case\", \"chan\", \"const\", \"continue\", \"default\", \"defer\", \"else\", \"fallthrough\", \"for\", \"func\", \"go\", \"goto\", \"if\", \"import\", \"interface\", \"map\", \"package\", \"range\", \"return\", \"select\", \"struct\", \"switch\", \"type\", \"var\"],\n          type: [\"bool\", \"byte\", \"complex64\", \"complex128\", \"error\", \"float32\", \"float64\", \"int8\", \"int16\", \"int32\", \"int64\", \"string\", \"uint8\", \"uint16\", \"uint32\", \"uint64\", \"int\", \"uint\", \"uintptr\", \"rune\"],\n          literal: [\"true\", \"false\", \"iota\", \"nil\"],\n          built_in: [\"append\", \"cap\", \"close\", \"complex\", \"copy\", \"imag\", \"len\", \"make\", \"new\", \"panic\", \"print\", \"println\", \"real\", \"recover\", \"delete\"]\n        }; return {\n          name: \"Go\", aliases: [\"golang\"], keywords: n, illegal: \"</\",\n          contains: [e.C_LINE_COMMENT_MODE, e.C_BLOCK_COMMENT_MODE, {\n            className: \"string\",\n            variants: [e.QUOTE_STRING_MODE, e.APOS_STRING_MODE, { begin: \"`\", end: \"`\" }]\n          }, {\n            className: \"number\", variants: [{\n              begin: e.C_NUMBER_RE + \"[i]\", relevance: 1\n            }, e.C_NUMBER_MODE]\n          }, { begin: /:=/ }, {\n            className: \"function\", beginKeywords: \"func\",\n            end: \"\\\\s*(\\\\{|$)\", excludeEnd: !0, contains: [e.TITLE_MODE, {\n              className: \"params\",\n              begin: /\\(/, end: /\\)/, endsParent: !0, keywords: n, illegal: /[\"']/\n            }]\n          }]\n        }\n      },\n      grmr_graphql: e => {\n        const n = e.regex; return {\n          name: \"GraphQL\", aliases: [\"gql\"],\n          case_insensitive: !0, disableAutodetect: !1, keywords: {\n            keyword: [\"query\", \"mutation\", \"subscription\", \"type\", \"input\", \"schema\", \"directive\", \"interface\", \"union\", \"scalar\", \"fragment\", \"enum\", \"on\"],\n            literal: [\"true\", \"false\", \"null\"]\n          },\n          contains: [e.HASH_COMMENT_MODE, e.QUOTE_STRING_MODE, e.NUMBER_MODE, {\n            scope: \"punctuation\", match: /[.]{3}/, relevance: 0\n          }, {\n            scope: \"punctuation\",\n            begin: /[\\!\\(\\)\\:\\=\\[\\]\\{\\|\\}]{1}/, relevance: 0\n          }, {\n            scope: \"variable\", begin: /\\$/,\n            end: /\\W/, excludeEnd: !0, relevance: 0\n          }, { scope: \"meta\", match: /@\\w+/, excludeEnd: !0 }, {\n            scope: \"symbol\", begin: n.concat(/[_A-Za-z][_0-9A-Za-z]*/, n.lookahead(/\\s*:/)),\n            relevance: 0\n          }], illegal: [/[;<']/, /BEGIN/]\n        }\n      }, grmr_ini: e => {\n        const n = e.regex, t = {\n          className: \"number\", relevance: 0, variants: [{ begin: /([+-]+)?[\\d]+_[\\d_]+/ }, {\n            begin: e.NUMBER_RE\n          }]\n        }, a = e.COMMENT(); a.variants = [{ begin: /;/, end: /$/ }, {\n          begin: /#/,\n          end: /$/\n        }]; const i = {\n          className: \"variable\", variants: [{ begin: /\\$[\\w\\d\"][\\w\\d_]*/ }, {\n            begin: /\\$\\{(.*?)\\}/\n          }]\n        }, r = {\n          className: \"literal\",\n          begin: /\\bon|off|true|false|yes|no\\b/\n        }, s = {\n          className: \"string\",\n          contains: [e.BACKSLASH_ESCAPE], variants: [{ begin: \"'''\", end: \"'''\", relevance: 10 }, {\n            begin: '\"\"\"', end: '\"\"\"', relevance: 10\n          }, { begin: '\"', end: '\"' }, { begin: \"'\", end: \"'\" }]\n        }, o = {\n          begin: /\\[/, end: /\\]/, contains: [a, r, i, s, t, \"self\"], relevance: 0\n        }, l = n.either(/[A-Za-z0-9_-]+/, /\"(\\\\\"|[^\"])*\"/, /'[^']*'/); return {\n          name: \"TOML, also INI\", aliases: [\"toml\"], case_insensitive: !0, illegal: /\\S/,\n          contains: [a, { className: \"section\", begin: /\\[+/, end: /\\]+/ }, {\n            begin: n.concat(l, \"(\\\\s*\\\\.\\\\s*\", l, \")*\", n.lookahead(/\\s*=\\s*[^#\\s]/)),\n            className: \"attr\", starts: { end: /$/, contains: [a, o, r, i, s, t] }\n          }]\n        }\n      }, grmr_java: e => {\n        const n = e.regex, t = \"[\\xc0-\\u02b8a-zA-Z_$][\\xc0-\\u02b8a-zA-Z_$0-9]*\", a = t + ue(\"(?:<\" + t + \"~~~(?:\\\\s*,\\\\s*\" + t + \"~~~)*>)?\", /~~~/g, 2), i = {\n          keyword: [\"synchronized\", \"abstract\", \"private\", \"var\", \"static\", \"if\", \"const \", \"for\", \"while\", \"strictfp\", \"finally\", \"protected\", \"import\", \"native\", \"final\", \"void\", \"enum\", \"else\", \"break\", \"transient\", \"catch\", \"instanceof\", \"volatile\", \"case\", \"assert\", \"package\", \"default\", \"public\", \"try\", \"switch\", \"continue\", \"throws\", \"protected\", \"public\", \"private\", \"module\", \"requires\", \"exports\", \"do\", \"sealed\", \"yield\", \"permits\"],\n          literal: [\"false\", \"true\", \"null\"],\n          type: [\"char\", \"boolean\", \"long\", \"float\", \"int\", \"byte\", \"short\", \"double\"],\n          built_in: [\"super\", \"this\"]\n        }, r = {\n          className: \"meta\", begin: \"@\" + t, contains: [{\n            begin: /\\(/, end: /\\)/, contains: [\"self\"]\n          }]\n        }, s = {\n          className: \"params\", begin: /\\(/,\n          end: /\\)/, keywords: i, relevance: 0, contains: [e.C_BLOCK_COMMENT_MODE], endsParent: !0\n        }\n          ; return {\n            name: \"Java\", aliases: [\"jsp\"], keywords: i, illegal: /<\\/|#/,\n            contains: [e.COMMENT(\"/\\\\*\\\\*\", \"\\\\*/\", {\n              relevance: 0, contains: [{\n                begin: /\\w+@/,\n                relevance: 0\n              }, { className: \"doctag\", begin: \"@[A-Za-z]+\" }]\n            }), {\n              begin: /import java\\.[a-z]+\\./, keywords: \"import\", relevance: 2\n            }, e.C_LINE_COMMENT_MODE, e.C_BLOCK_COMMENT_MODE, {\n              begin: /\"\"\"/, end: /\"\"\"/,\n              className: \"string\", contains: [e.BACKSLASH_ESCAPE]\n            }, e.APOS_STRING_MODE, e.QUOTE_STRING_MODE, {\n              match: [/\\b(?:class|interface|enum|extends|implements|new)/, /\\s+/, t], className: {\n                1: \"keyword\", 3: \"title.class\"\n              }\n            }, { match: /non-sealed/, scope: \"keyword\" }, {\n              begin: [n.concat(/(?!else)/, t), /\\s+/, t, /\\s+/, /=(?!=)/], className: {\n                1: \"type\",\n                3: \"variable\", 5: \"operator\"\n              }\n            }, {\n              begin: [/record/, /\\s+/, t], className: {\n                1: \"keyword\",\n                3: \"title.class\"\n              }, contains: [s, e.C_LINE_COMMENT_MODE, e.C_BLOCK_COMMENT_MODE]\n            }, {\n              beginKeywords: \"new throw return else\", relevance: 0\n            }, {\n              begin: [\"(?:\" + a + \"\\\\s+)\", e.UNDERSCORE_IDENT_RE, /\\s*(?=\\()/], className: {\n                2: \"title.function\"\n              }, keywords: i, contains: [{\n                className: \"params\", begin: /\\(/,\n                end: /\\)/, keywords: i, relevance: 0,\n                contains: [r, e.APOS_STRING_MODE, e.QUOTE_STRING_MODE, ge, e.C_BLOCK_COMMENT_MODE]\n              }, e.C_LINE_COMMENT_MODE, e.C_BLOCK_COMMENT_MODE]\n            }, ge, r]\n          }\n      }, grmr_javascript: we,\n      grmr_json: e => {\n        const n = [\"true\", \"false\", \"null\"], t = {\n          scope: \"literal\",\n          beginKeywords: n.join(\" \")\n        }; return {\n          name: \"JSON\", keywords: { literal: n }, contains: [{\n            className: \"attr\", begin: /\"(\\\\.|[^\\\\\"\\r\\n])*\"(?=\\s*:)/, relevance: 1.01\n          }, {\n            match: /[{}[\\],:]/, className: \"punctuation\", relevance: 0\n          }, e.QUOTE_STRING_MODE, t, e.C_NUMBER_MODE, e.C_LINE_COMMENT_MODE, e.C_BLOCK_COMMENT_MODE],\n          illegal: \"\\\\S\"\n        }\n      }, grmr_kotlin: e => {\n        const n = {\n          keyword: \"abstract as val var vararg get set class object open private protected public noinline crossinline dynamic final enum if else do while for when throw try catch finally import package is in fun override companion reified inline lateinit init interface annotation data sealed internal infix operator out by constructor super tailrec where const inner suspend typealias external expect actual\",\n          built_in: \"Byte Short Char Int Long Boolean Float Double Void Unit Nothing\",\n          literal: \"true false null\"\n        }, t = {\n          className: \"symbol\", begin: e.UNDERSCORE_IDENT_RE + \"@\"\n        }, a = { className: \"subst\", begin: /\\$\\{/, end: /\\}/, contains: [e.C_NUMBER_MODE] }, i = {\n          className: \"variable\", begin: \"\\\\$\" + e.UNDERSCORE_IDENT_RE\n        }, r = {\n          className: \"string\",\n          variants: [{ begin: '\"\"\"', end: '\"\"\"(?=[^\"])', contains: [i, a] }, {\n            begin: \"'\", end: \"'\",\n            illegal: /\\n/, contains: [e.BACKSLASH_ESCAPE]\n          }, {\n            begin: '\"', end: '\"', illegal: /\\n/,\n            contains: [e.BACKSLASH_ESCAPE, i, a]\n          }]\n        }; a.contains.push(r); const s = {\n          className: \"meta\",\n          begin: \"@(?:file|property|field|get|set|receiver|param|setparam|delegate)\\\\s*:(?:\\\\s*\" + e.UNDERSCORE_IDENT_RE + \")?\"\n        }, o = {\n          className: \"meta\", begin: \"@\" + e.UNDERSCORE_IDENT_RE, contains: [{\n            begin: /\\(/,\n            end: /\\)/, contains: [e.inherit(r, { className: \"string\" }), \"self\"]\n          }]\n        }, l = ge, c = e.COMMENT(\"/\\\\*\", \"\\\\*/\", { contains: [e.C_BLOCK_COMMENT_MODE] }), d = {\n          variants: [{ className: \"type\", begin: e.UNDERSCORE_IDENT_RE }, {\n            begin: /\\(/, end: /\\)/,\n            contains: []\n          }]\n        }, g = d; return g.variants[1].contains = [d], d.variants[1].contains = [g],\n        {\n          name: \"Kotlin\", aliases: [\"kt\", \"kts\"], keywords: n,\n          contains: [e.COMMENT(\"/\\\\*\\\\*\", \"\\\\*/\", {\n            relevance: 0, contains: [{\n              className: \"doctag\",\n              begin: \"@[A-Za-z]+\"\n            }]\n          }), e.C_LINE_COMMENT_MODE, c, {\n            className: \"keyword\",\n            begin: /\\b(break|continue|return|this)\\b/, starts: {\n              contains: [{\n                className: \"symbol\",\n                begin: /@\\w+/\n              }]\n            }\n          }, t, s, o, {\n            className: \"function\", beginKeywords: \"fun\", end: \"[(]|$\",\n            returnBegin: !0, excludeEnd: !0, keywords: n, relevance: 5, contains: [{\n              begin: e.UNDERSCORE_IDENT_RE + \"\\\\s*\\\\(\", returnBegin: !0, relevance: 0,\n              contains: [e.UNDERSCORE_TITLE_MODE]\n            }, {\n              className: \"type\", begin: /</, end: />/,\n              keywords: \"reified\", relevance: 0\n            }, {\n              className: \"params\", begin: /\\(/, end: /\\)/,\n              endsParent: !0, keywords: n, relevance: 0, contains: [{\n                begin: /:/, end: /[=,\\/]/,\n                endsWithParent: !0, contains: [d, e.C_LINE_COMMENT_MODE, c], relevance: 0\n              }, e.C_LINE_COMMENT_MODE, c, s, o, r, e.C_NUMBER_MODE]\n            }, c]\n          }, {\n            begin: [/class|interface|trait/, /\\s+/, e.UNDERSCORE_IDENT_RE], beginScope: {\n              3: \"title.class\"\n            }, keywords: \"class interface trait\", end: /[:\\{(]|$/, excludeEnd: !0,\n            illegal: \"extends implements\", contains: [{\n              beginKeywords: \"public protected internal private constructor\"\n            }, e.UNDERSCORE_TITLE_MODE, {\n              className: \"type\", begin: /</, end: />/, excludeBegin: !0,\n              excludeEnd: !0, relevance: 0\n            }, {\n              className: \"type\", begin: /[,:]\\s*/, end: /[<\\(,){\\s]|$/,\n              excludeBegin: !0, returnEnd: !0\n            }, s, o]\n          }, r, {\n            className: \"meta\", begin: \"^#!/usr/bin/env\",\n            end: \"$\", illegal: \"\\n\"\n          }, l]\n        }\n      }, grmr_less: e => {\n        const n = te(e), t = le, a = \"([\\\\w-]+|@\\\\{[\\\\w-]+\\\\})\", i = [], r = [], s = e => ({\n          className: \"string\", begin: \"~?\" + e + \".*?\" + e\n        }), o = (e, n, t) => ({\n          className: e, begin: n,\n          relevance: t\n        }), l = {\n          $pattern: /[a-z-]+/, keyword: \"and or not only\",\n          attribute: ie.join(\" \")\n        }, c = {\n          begin: \"\\\\(\", end: \"\\\\)\", contains: r, keywords: l,\n          relevance: 0\n        }\n          ; r.push(e.C_LINE_COMMENT_MODE, e.C_BLOCK_COMMENT_MODE, s(\"'\"), s('\"'), n.CSS_NUMBER_MODE, {\n            begin: \"(url|data-uri)\\\\(\", starts: {\n              className: \"string\", end: \"[\\\\)\\\\n]\",\n              excludeEnd: !0\n            }\n          }, n.HEXCOLOR, c, o(\"variable\", \"@@?[\\\\w-]+\", 10), o(\"variable\", \"@\\\\{[\\\\w-]+\\\\}\"), o(\"built_in\", \"~?`[^`]*?`\"), {\n            className: \"attribute\", begin: \"[\\\\w-]+\\\\s*:\", end: \":\", returnBegin: !0, excludeEnd: !0\n          }, n.IMPORTANT, { beginKeywords: \"and not\" }, n.FUNCTION_DISPATCH); const d = r.concat({\n            begin: /\\{/, end: /\\}/, contains: i\n          }), g = {\n            beginKeywords: \"when\", endsWithParent: !0,\n            contains: [{ beginKeywords: \"and not\" }].concat(r)\n          }, u = {\n            begin: a + \"\\\\s*:\",\n            returnBegin: !0, end: /[;}]/, relevance: 0, contains: [{\n              begin: /-(webkit|moz|ms|o)-/\n            }, n.CSS_VARIABLE, {\n              className: \"attribute\", begin: \"\\\\b(\" + oe.join(\"|\") + \")\\\\b\",\n              end: /(?=:)/, starts: { endsWithParent: !0, illegal: \"[<=$]\", relevance: 0, contains: r }\n            }]\n          }, b = {\n            className: \"keyword\",\n            begin: \"@(import|media|charset|font-face|(-[a-z]+-)?keyframes|supports|document|namespace|page|viewport|host)\\\\b\",\n            starts: { end: \"[;{}]\", keywords: l, returnEnd: !0, contains: r, relevance: 0 }\n          }, m = {\n            className: \"variable\", variants: [{ begin: \"@[\\\\w-]+\\\\s*:\", relevance: 15 }, {\n              begin: \"@[\\\\w-]+\"\n            }], starts: { end: \"[;}]\", returnEnd: !0, contains: d }\n          }, p = {\n            variants: [{\n              begin: \"[\\\\.#:&\\\\[>]\", end: \"[;{}]\"\n            }, { begin: a, end: /\\{/ }], returnBegin: !0,\n            returnEnd: !0, illegal: \"[<='$\\\"]\", relevance: 0,\n            contains: [e.C_LINE_COMMENT_MODE, e.C_BLOCK_COMMENT_MODE, g, o(\"keyword\", \"all\\\\b\"), o(\"variable\", \"@\\\\{[\\\\w-]+\\\\}\"), {\n              begin: \"\\\\b(\" + ae.join(\"|\") + \")\\\\b\", className: \"selector-tag\"\n            }, n.CSS_NUMBER_MODE, o(\"selector-tag\", a, 0), o(\"selector-id\", \"#\" + a), o(\"selector-class\", \"\\\\.\" + a, 0), o(\"selector-tag\", \"&\", 0), n.ATTRIBUTE_SELECTOR_MODE, {\n              className: \"selector-pseudo\", begin: \":(\" + re.join(\"|\") + \")\"\n            }, {\n              className: \"selector-pseudo\", begin: \":(:)?(\" + se.join(\"|\") + \")\"\n            }, {\n              begin: /\\(/,\n              end: /\\)/, relevance: 0, contains: d\n            }, { begin: \"!important\" }, n.FUNCTION_DISPATCH]\n          }, _ = {\n            begin: `[\\\\w-]+:(:)?(${t.join(\"|\")})`, returnBegin: !0, contains: [p]\n          }\n          ; return i.push(e.C_LINE_COMMENT_MODE, e.C_BLOCK_COMMENT_MODE, b, m, _, u, p, g, n.FUNCTION_DISPATCH),\n            { name: \"Less\", case_insensitive: !0, illegal: \"[=>'/<($\\\"]\", contains: i }\n      },\n      grmr_lua: e => {\n        const n = \"\\\\[=*\\\\[\", t = \"\\\\]=*\\\\]\", a = {\n          begin: n, end: t, contains: [\"self\"]\n        }, i = [e.COMMENT(\"--(?!\\\\[=*\\\\[)\", \"$\"), e.COMMENT(\"--\\\\[=*\\\\[\", t, {\n          contains: [a],\n          relevance: 10\n        })]; return {\n          name: \"Lua\", keywords: {\n            $pattern: e.UNDERSCORE_IDENT_RE,\n            literal: \"true false nil\",\n            keyword: \"and break do else elseif end for goto if in local not or repeat return then until while\",\n            built_in: \"_G _ENV _VERSION __index __newindex __mode __call __metatable __tostring __len __gc __add __sub __mul __div __mod __pow __concat __unm __eq __lt __le assert collectgarbage dofile error getfenv getmetatable ipairs load loadfile loadstring module next pairs pcall print rawequal rawget rawset require select setfenv setmetatable tonumber tostring type unpack xpcall arg self coroutine resume yield status wrap create running debug getupvalue debug sethook getmetatable gethook setmetatable setlocal traceback setfenv getinfo setupvalue getlocal getregistry getfenv io lines write close flush open output type read stderr stdin input stdout popen tmpfile math log max acos huge ldexp pi cos tanh pow deg tan cosh sinh random randomseed frexp ceil floor rad abs sqrt modf asin min mod fmod log10 atan2 exp sin atan os exit setlocale date getenv difftime remove time clock tmpname rename execute package preload loadlib loaded loaders cpath config path seeall string sub upper len gfind rep find match char dump gmatch reverse byte format gsub lower table setn insert getn foreachi maxn foreach concat sort remove\"\n          }, contains: i.concat([{\n            className: \"function\", beginKeywords: \"function\", end: \"\\\\)\",\n            contains: [e.inherit(e.TITLE_MODE, {\n              begin: \"([_a-zA-Z]\\\\w*\\\\.)*([_a-zA-Z]\\\\w*:)?[_a-zA-Z]\\\\w*\"\n            }), {\n              className: \"params\",\n              begin: \"\\\\(\", endsWithParent: !0, contains: i\n            }].concat(i)\n          }, e.C_NUMBER_MODE, e.APOS_STRING_MODE, e.QUOTE_STRING_MODE, {\n            className: \"string\",\n            begin: n, end: t, contains: [a], relevance: 5\n          }])\n        }\n      }, grmr_makefile: e => {\n        const n = {\n          className: \"variable\", variants: [{\n            begin: \"\\\\$\\\\(\" + e.UNDERSCORE_IDENT_RE + \"\\\\)\",\n            contains: [e.BACKSLASH_ESCAPE]\n          }, { begin: /\\$[@%<?\\^\\+\\*]/ }]\n        }, t = {\n          className: \"string\",\n          begin: /\"/, end: /\"/, contains: [e.BACKSLASH_ESCAPE, n]\n        }, a = {\n          className: \"variable\",\n          begin: /\\$\\([\\w-]+\\s/, end: /\\)/, keywords: {\n            built_in: \"subst patsubst strip findstring filter filter-out sort word wordlist firstword lastword dir notdir suffix basename addsuffix addprefix join wildcard realpath abspath error warning shell origin flavor foreach if or and call eval file value\"\n          }, contains: [n]\n        }, i = { begin: \"^\" + e.UNDERSCORE_IDENT_RE + \"\\\\s*(?=[:+?]?=)\" }, r = {\n          className: \"section\", begin: /^[^\\s]+:/, end: /$/, contains: [n]\n        }; return {\n          name: \"Makefile\", aliases: [\"mk\", \"mak\", \"make\"], keywords: {\n            $pattern: /[\\w-]+/,\n            keyword: \"define endef undefine ifdef ifndef ifeq ifneq else endif include -include sinclude override export unexport private vpath\"\n          }, contains: [e.HASH_COMMENT_MODE, n, t, a, i, {\n            className: \"meta\", begin: /^\\.PHONY:/,\n            end: /$/, keywords: { $pattern: /[\\.\\w]+/, keyword: \".PHONY\" }\n          }, r]\n        }\n      }, grmr_xml: e => {\n        const n = e.regex, t = n.concat(/[\\p{L}_]/u, n.optional(/[\\p{L}0-9_.-]*:/u), /[\\p{L}0-9_.-]*/u), a = {\n          className: \"symbol\", begin: /&[a-z]+;|&#[0-9]+;|&#x[a-f0-9]+;/\n        }, i = {\n          begin: /\\s/,\n          contains: [{ className: \"keyword\", begin: /#?[a-z_][a-z1-9_-]+/, illegal: /\\n/ }]\n        }, r = e.inherit(i, { begin: /\\(/, end: /\\)/ }), s = e.inherit(e.APOS_STRING_MODE, {\n          className: \"string\"\n        }), o = e.inherit(e.QUOTE_STRING_MODE, { className: \"string\" }), l = {\n          endsWithParent: !0, illegal: /</, relevance: 0, contains: [{\n            className: \"attr\",\n            begin: /[\\p{L}0-9._:-]+/u, relevance: 0\n          }, {\n            begin: /=\\s*/, relevance: 0, contains: [{\n              className: \"string\", endsParent: !0, variants: [{ begin: /\"/, end: /\"/, contains: [a] }, {\n                begin: /'/, end: /'/, contains: [a]\n              }, { begin: /[^\\s\"'=<>`]+/ }]\n            }]\n          }]\n        }; return {\n          name: \"HTML, XML\",\n          aliases: [\"html\", \"xhtml\", \"rss\", \"atom\", \"xjb\", \"xsd\", \"xsl\", \"plist\", \"wsf\", \"svg\"],\n          case_insensitive: !0, unicodeRegex: !0, contains: [{\n            className: \"meta\", begin: /<![a-z]/,\n            end: />/, relevance: 10, contains: [i, o, s, r, {\n              begin: /\\[/, end: /\\]/, contains: [{\n                className: \"meta\", begin: /<![a-z]/, end: />/, contains: [i, r, o, s]\n              }]\n            }]\n          }, e.COMMENT(/<!--/, /-->/, { relevance: 10 }), {\n            begin: /<!\\[CDATA\\[/, end: /\\]\\]>/,\n            relevance: 10\n          }, a, {\n            className: \"meta\", end: /\\?>/, variants: [{\n              begin: /<\\?xml/,\n              relevance: 10, contains: [o]\n            }, { begin: /<\\?[a-z][a-z0-9]+/ }]\n          }, {\n            className: \"tag\",\n            begin: /<style(?=\\s|>)/, end: />/, keywords: { name: \"style\" }, contains: [l], starts: {\n              end: /<\\/style>/, returnEnd: !0, subLanguage: [\"css\", \"xml\"]\n            }\n          }, {\n            className: \"tag\",\n            begin: /<script(?=\\s|>)/, end: />/, keywords: { name: \"script\" }, contains: [l], starts: {\n              end: /<\\/script>/, returnEnd: !0, subLanguage: [\"javascript\", \"handlebars\", \"xml\"]\n            }\n          }, {\n            className: \"tag\", begin: /<>|<\\/>/\n          }, {\n            className: \"tag\",\n            begin: n.concat(/</, n.lookahead(n.concat(t, n.either(/\\/>/, />/, /\\s/)))),\n            end: /\\/?>/, contains: [{ className: \"name\", begin: t, relevance: 0, starts: l }]\n          }, {\n            className: \"tag\", begin: n.concat(/<\\//, n.lookahead(n.concat(t, />/))), contains: [{\n              className: \"name\", begin: t, relevance: 0\n            }, { begin: />/, relevance: 0, endsParent: !0 }]\n          }]\n        }\n      }, grmr_markdown: e => {\n        const n = {\n          begin: /<\\/?[A-Za-z_]/, end: \">\", subLanguage: \"xml\",\n          relevance: 0\n        }, t = {\n          variants: [{ begin: /\\[.+?\\]\\[.*?\\]/, relevance: 0 }, {\n            begin: /\\[.+?\\]\\(((data|javascript|mailto):|(?:http|ftp)s?:\\/\\/).*?\\)/,\n            relevance: 2\n          }, {\n            begin: e.regex.concat(/\\[.+?\\]\\(/, /[A-Za-z][A-Za-z0-9+.-]*/, /:\\/\\/.*?\\)/),\n            relevance: 2\n          }, { begin: /\\[.+?\\]\\([./?&#].*?\\)/, relevance: 1 }, {\n            begin: /\\[.*?\\]\\(.*?\\)/, relevance: 0\n          }], returnBegin: !0, contains: [{\n            match: /\\[(?=\\])/\n          }, {\n            className: \"string\", relevance: 0, begin: \"\\\\[\", end: \"\\\\]\", excludeBegin: !0,\n            returnEnd: !0\n          }, {\n            className: \"link\", relevance: 0, begin: \"\\\\]\\\\(\", end: \"\\\\)\",\n            excludeBegin: !0, excludeEnd: !0\n          }, {\n            className: \"symbol\", relevance: 0, begin: \"\\\\]\\\\[\",\n            end: \"\\\\]\", excludeBegin: !0, excludeEnd: !0\n          }]\n        }, a = {\n          className: \"strong\", contains: [],\n          variants: [{ begin: /_{2}(?!\\s)/, end: /_{2}/ }, { begin: /\\*{2}(?!\\s)/, end: /\\*{2}/ }]\n        }, i = {\n          className: \"emphasis\", contains: [], variants: [{ begin: /\\*(?![*\\s])/, end: /\\*/ }, {\n            begin: /_(?![_\\s])/, end: /_/, relevance: 0\n          }]\n        }, r = e.inherit(a, {\n          contains: []\n        }), s = e.inherit(i, { contains: [] }); a.contains.push(s), i.contains.push(r)\n          ; let o = [n, t]; return [a, i, r, s].forEach((e => {\n            e.contains = e.contains.concat(o)\n          })), o = o.concat(a, i), {\n            name: \"Markdown\", aliases: [\"md\", \"mkdown\", \"mkd\"], contains: [{\n              className: \"section\", variants: [{ begin: \"^#{1,6}\", end: \"$\", contains: o }, {\n                begin: \"(?=^.+?\\\\n[=-]{2,}$)\", contains: [{ begin: \"^[=-]*$\" }, {\n                  begin: \"^\", end: \"\\\\n\",\n                  contains: o\n                }]\n              }]\n            }, n, {\n              className: \"bullet\", begin: \"^[ \\t]*([*+-]|(\\\\d+\\\\.))(?=\\\\s+)\",\n              end: \"\\\\s+\", excludeEnd: !0\n            }, a, i, {\n              className: \"quote\", begin: \"^>\\\\s+\", contains: o,\n              end: \"$\"\n            }, {\n              className: \"code\", variants: [{ begin: \"(`{3,})[^`](.|\\\\n)*?\\\\1`*[ ]*\" }, {\n                begin: \"(~{3,})[^~](.|\\\\n)*?\\\\1~*[ ]*\"\n              }, { begin: \"```\", end: \"```+[ ]*$\" }, {\n                begin: \"~~~\", end: \"~~~+[ ]*$\"\n              }, { begin: \"`.+?`\" }, {\n                begin: \"(?=^( {4}|\\\\t))\",\n                contains: [{ begin: \"^( {4}|\\\\t)\", end: \"(\\\\n)$\" }], relevance: 0\n              }]\n            }, {\n              begin: \"^[-\\\\*]{3,}\", end: \"$\"\n            }, t, {\n              begin: /^\\[[^\\n]+\\]:/, returnBegin: !0, contains: [{\n                className: \"symbol\", begin: /\\[/, end: /\\]/, excludeBegin: !0, excludeEnd: !0\n              }, {\n                className: \"link\", begin: /:\\s*/, end: /$/, excludeBegin: !0\n              }]\n            }]\n          }\n      }, grmr_objectivec: e => {\n        const n = /[a-zA-Z@][a-zA-Z0-9_]*/, t = {\n          $pattern: n,\n          keyword: [\"@interface\", \"@class\", \"@protocol\", \"@implementation\"]\n        }; return {\n          name: \"Objective-C\", aliases: [\"mm\", \"objc\", \"obj-c\", \"obj-c++\", \"objective-c++\"],\n          keywords: {\n            \"variable.language\": [\"this\", \"super\"], $pattern: n,\n            keyword: [\"while\", \"export\", \"sizeof\", \"typedef\", \"const\", \"struct\", \"for\", \"union\", \"volatile\", \"static\", \"mutable\", \"if\", \"do\", \"return\", \"goto\", \"enum\", \"else\", \"break\", \"extern\", \"asm\", \"case\", \"default\", \"register\", \"explicit\", \"typename\", \"switch\", \"continue\", \"inline\", \"readonly\", \"assign\", \"readwrite\", \"self\", \"@synchronized\", \"id\", \"typeof\", \"nonatomic\", \"IBOutlet\", \"IBAction\", \"strong\", \"weak\", \"copy\", \"in\", \"out\", \"inout\", \"bycopy\", \"byref\", \"oneway\", \"__strong\", \"__weak\", \"__block\", \"__autoreleasing\", \"@private\", \"@protected\", \"@public\", \"@try\", \"@property\", \"@end\", \"@throw\", \"@catch\", \"@finally\", \"@autoreleasepool\", \"@synthesize\", \"@dynamic\", \"@selector\", \"@optional\", \"@required\", \"@encode\", \"@package\", \"@import\", \"@defs\", \"@compatibility_alias\", \"__bridge\", \"__bridge_transfer\", \"__bridge_retained\", \"__bridge_retain\", \"__covariant\", \"__contravariant\", \"__kindof\", \"_Nonnull\", \"_Nullable\", \"_Null_unspecified\", \"__FUNCTION__\", \"__PRETTY_FUNCTION__\", \"__attribute__\", \"getter\", \"setter\", \"retain\", \"unsafe_unretained\", \"nonnull\", \"nullable\", \"null_unspecified\", \"null_resettable\", \"class\", \"instancetype\", \"NS_DESIGNATED_INITIALIZER\", \"NS_UNAVAILABLE\", \"NS_REQUIRES_SUPER\", \"NS_RETURNS_INNER_POINTER\", \"NS_INLINE\", \"NS_AVAILABLE\", \"NS_DEPRECATED\", \"NS_ENUM\", \"NS_OPTIONS\", \"NS_SWIFT_UNAVAILABLE\", \"NS_ASSUME_NONNULL_BEGIN\", \"NS_ASSUME_NONNULL_END\", \"NS_REFINED_FOR_SWIFT\", \"NS_SWIFT_NAME\", \"NS_SWIFT_NOTHROW\", \"NS_DURING\", \"NS_HANDLER\", \"NS_ENDHANDLER\", \"NS_VALUERETURN\", \"NS_VOIDRETURN\"],\n            literal: [\"false\", \"true\", \"FALSE\", \"TRUE\", \"nil\", \"YES\", \"NO\", \"NULL\"],\n            built_in: [\"dispatch_once_t\", \"dispatch_queue_t\", \"dispatch_sync\", \"dispatch_async\", \"dispatch_once\"],\n            type: [\"int\", \"float\", \"char\", \"unsigned\", \"signed\", \"short\", \"long\", \"double\", \"wchar_t\", \"unichar\", \"void\", \"bool\", \"BOOL\", \"id|0\", \"_Bool\"]\n          }, illegal: \"</\", contains: [{\n            className: \"built_in\",\n            begin: \"\\\\b(AV|CA|CF|CG|CI|CL|CM|CN|CT|MK|MP|MTK|MTL|NS|SCN|SK|UI|WK|XC)\\\\w+\"\n          }, e.C_LINE_COMMENT_MODE, e.C_BLOCK_COMMENT_MODE, e.C_NUMBER_MODE, e.QUOTE_STRING_MODE, e.APOS_STRING_MODE, {\n            className: \"string\", variants: [{\n              begin: '@\"', end: '\"', illegal: \"\\\\n\",\n              contains: [e.BACKSLASH_ESCAPE]\n            }]\n          }, {\n            className: \"meta\", begin: /#\\s*[a-z]+\\b/, end: /$/,\n            keywords: {\n              keyword: \"if else elif endif define undef warning error line pragma ifdef ifndef include\"\n            }, contains: [{ begin: /\\\\\\n/, relevance: 0 }, e.inherit(e.QUOTE_STRING_MODE, {\n              className: \"string\"\n            }), {\n              className: \"string\", begin: /<.*?>/, end: /$/, illegal: \"\\\\n\"\n            }, e.C_LINE_COMMENT_MODE, e.C_BLOCK_COMMENT_MODE]\n          }, {\n            className: \"class\",\n            begin: \"(\" + t.keyword.join(\"|\") + \")\\\\b\", end: /(\\{|$)/, excludeEnd: !0, keywords: t,\n            contains: [e.UNDERSCORE_TITLE_MODE]\n          }, {\n            begin: \"\\\\.\" + e.UNDERSCORE_IDENT_RE,\n            relevance: 0\n          }]\n        }\n      }, grmr_perl: e => {\n        const n = e.regex, t = /[dualxmsipngr]{0,12}/, a = {\n          $pattern: /[\\w.]+/,\n          keyword: \"abs accept alarm and atan2 bind binmode bless break caller chdir chmod chomp chop chown chr chroot close closedir connect continue cos crypt dbmclose dbmopen defined delete die do dump each else elsif endgrent endhostent endnetent endprotoent endpwent endservent eof eval exec exists exit exp fcntl fileno flock for foreach fork format formline getc getgrent getgrgid getgrnam gethostbyaddr gethostbyname gethostent getlogin getnetbyaddr getnetbyname getnetent getpeername getpgrp getpriority getprotobyname getprotobynumber getprotoent getpwent getpwnam getpwuid getservbyname getservbyport getservent getsockname getsockopt given glob gmtime goto grep gt hex if index int ioctl join keys kill last lc lcfirst length link listen local localtime log lstat lt ma map mkdir msgctl msgget msgrcv msgsnd my ne next no not oct open opendir or ord our pack package pipe pop pos print printf prototype push q|0 qq quotemeta qw qx rand read readdir readline readlink readpipe recv redo ref rename require reset return reverse rewinddir rindex rmdir say scalar seek seekdir select semctl semget semop send setgrent sethostent setnetent setpgrp setpriority setprotoent setpwent setservent setsockopt shift shmctl shmget shmread shmwrite shutdown sin sleep socket socketpair sort splice split sprintf sqrt srand stat state study sub substr symlink syscall sysopen sysread sysseek system syswrite tell telldir tie tied time times tr truncate uc ucfirst umask undef unless unlink unpack unshift untie until use utime values vec wait waitpid wantarray warn when while write x|0 xor y|0\"\n        }, i = { className: \"subst\", begin: \"[$@]\\\\{\", end: \"\\\\}\", keywords: a }, r = {\n          begin: /->\\{/,\n          end: /\\}/\n        }, s = {\n          variants: [{ begin: /\\$\\d/ }, {\n            begin: n.concat(/[$%@](\\^\\w\\b|#\\w+(::\\w+)*|\\{\\w+\\}|\\w+(::\\w*)*)/, \"(?![A-Za-z])(?![@$%])\")\n          }, { begin: /[$%@][^\\s\\w{]/, relevance: 0 }]\n        }, o = [e.BACKSLASH_ESCAPE, i, s], l = [/!/, /\\//, /\\|/, /\\?/, /'/, /\"/, /#/], c = (e, a, i = \"\\\\1\") => {\n          const r = \"\\\\1\" === i ? i : n.concat(i, a)\n            ; return n.concat(n.concat(\"(?:\", e, \")\"), a, /(?:\\\\.|[^\\\\\\/])*?/, r, /(?:\\\\.|[^\\\\\\/])*?/, i, t)\n        }, d = (e, a, i) => n.concat(n.concat(\"(?:\", e, \")\"), a, /(?:\\\\.|[^\\\\\\/])*?/, i, t), g = [s, e.HASH_COMMENT_MODE, e.COMMENT(/^=\\w/, /=cut/, {\n          endsWithParent: !0\n        }), r, {\n            className: \"string\", contains: o, variants: [{\n              begin: \"q[qwxr]?\\\\s*\\\\(\", end: \"\\\\)\", relevance: 5\n            }, {\n              begin: \"q[qwxr]?\\\\s*\\\\[\",\n              end: \"\\\\]\", relevance: 5\n            }, { begin: \"q[qwxr]?\\\\s*\\\\{\", end: \"\\\\}\", relevance: 5 }, {\n              begin: \"q[qwxr]?\\\\s*\\\\|\", end: \"\\\\|\", relevance: 5\n            }, {\n              begin: \"q[qwxr]?\\\\s*<\", end: \">\",\n              relevance: 5\n            }, { begin: \"qw\\\\s+q\", end: \"q\", relevance: 5 }, {\n              begin: \"'\", end: \"'\",\n              contains: [e.BACKSLASH_ESCAPE]\n            }, { begin: '\"', end: '\"' }, {\n              begin: \"`\", end: \"`\",\n              contains: [e.BACKSLASH_ESCAPE]\n            }, { begin: /\\{\\w+\\}/, relevance: 0 }, {\n              begin: \"-?\\\\w+\\\\s*=>\", relevance: 0\n            }]\n          }, {\n            className: \"number\",\n            begin: \"(\\\\b0[0-7_]+)|(\\\\b0x[0-9a-fA-F_]+)|(\\\\b[1-9][0-9_]*(\\\\.[0-9_]+)?)|[0_]\\\\b\",\n            relevance: 0\n          }, {\n            begin: \"(\\\\/\\\\/|\" + e.RE_STARTERS_RE + \"|\\\\b(split|return|print|reverse|grep)\\\\b)\\\\s*\",\n            keywords: \"split return print reverse grep\", relevance: 0,\n            contains: [e.HASH_COMMENT_MODE, {\n              className: \"regexp\", variants: [{\n                begin: c(\"s|tr|y\", n.either(...l, { capture: !0 }))\n              }, { begin: c(\"s|tr|y\", \"\\\\(\", \"\\\\)\") }, {\n                begin: c(\"s|tr|y\", \"\\\\[\", \"\\\\]\")\n              }, { begin: c(\"s|tr|y\", \"\\\\{\", \"\\\\}\") }], relevance: 2\n            }, {\n              className: \"regexp\", variants: [{ begin: /(m|qr)\\/\\//, relevance: 0 }, {\n                begin: d(\"(?:m|qr)?\", /\\//, /\\//)\n              }, {\n                begin: d(\"m|qr\", n.either(...l, {\n                  capture: !0\n                }), /\\1/)\n              }, { begin: d(\"m|qr\", /\\(/, /\\)/) }, { begin: d(\"m|qr\", /\\[/, /\\]/) }, {\n                begin: d(\"m|qr\", /\\{/, /\\}/)\n              }]\n            }]\n          }, {\n            className: \"function\", beginKeywords: \"sub\",\n            end: \"(\\\\s*\\\\(.*?\\\\))?[;{]\", excludeEnd: !0, relevance: 5, contains: [e.TITLE_MODE]\n          }, {\n            begin: \"-\\\\w\\\\b\", relevance: 0\n          }, {\n            begin: \"^__DATA__$\", end: \"^__END__$\",\n            subLanguage: \"mojolicious\", contains: [{ begin: \"^@@.*\", end: \"$\", className: \"comment\" }]\n          }]; return i.contains = g, r.contains = g, {\n            name: \"Perl\", aliases: [\"pl\", \"pm\"], keywords: a,\n            contains: g\n          }\n      }, grmr_php: e => {\n        const n = e.regex, t = /(?![A-Za-z0-9])(?![$])/, a = n.concat(/[a-zA-Z_\\x7f-\\xff][a-zA-Z0-9_\\x7f-\\xff]*/, t), i = n.concat(/(\\\\?[A-Z][a-z0-9_\\x7f-\\xff]+|\\\\?[A-Z]+(?=[A-Z][a-z0-9_\\x7f-\\xff])){1,}/, t), r = {\n          scope: \"variable\", match: \"\\\\$+\" + a\n        }, s = {\n          scope: \"subst\", variants: [{ begin: /\\$\\w+/ }, {\n            begin: /\\{\\$/, end: /\\}/\n          }]\n        }, o = e.inherit(e.APOS_STRING_MODE, {\n          illegal: null\n        }), l = \"[ \\t\\n]\", c = {\n          scope: \"string\", variants: [e.inherit(e.QUOTE_STRING_MODE, {\n            illegal: null, contains: e.QUOTE_STRING_MODE.contains.concat(s)\n          }), o, e.END_SAME_AS_BEGIN({\n            begin: /<<<[ \\t]*(\\w+)\\n/, end: /[ \\t]*(\\w+)\\b/,\n            contains: e.QUOTE_STRING_MODE.contains.concat(s)\n          })]\n        }, d = {\n          scope: \"number\",\n          variants: [{ begin: \"\\\\b0[bB][01]+(?:_[01]+)*\\\\b\" }, {\n            begin: \"\\\\b0[oO][0-7]+(?:_[0-7]+)*\\\\b\"\n          }, {\n            begin: \"\\\\b0[xX][\\\\da-fA-F]+(?:_[\\\\da-fA-F]+)*\\\\b\"\n          }, {\n            begin: \"(?:\\\\b\\\\d+(?:_\\\\d+)*(\\\\.(?:\\\\d+(?:_\\\\d+)*))?|\\\\B\\\\.\\\\d+)(?:[eE][+-]?\\\\d+)?\"\n          }], relevance: 0\n        }, g = [\"false\", \"null\", \"true\"], u = [\"__CLASS__\", \"__DIR__\", \"__FILE__\", \"__FUNCTION__\", \"__COMPILER_HALT_OFFSET__\", \"__LINE__\", \"__METHOD__\", \"__NAMESPACE__\", \"__TRAIT__\", \"die\", \"echo\", \"exit\", \"include\", \"include_once\", \"print\", \"require\", \"require_once\", \"array\", \"abstract\", \"and\", \"as\", \"binary\", \"bool\", \"boolean\", \"break\", \"callable\", \"case\", \"catch\", \"class\", \"clone\", \"const\", \"continue\", \"declare\", \"default\", \"do\", \"double\", \"else\", \"elseif\", \"empty\", \"enddeclare\", \"endfor\", \"endforeach\", \"endif\", \"endswitch\", \"endwhile\", \"enum\", \"eval\", \"extends\", \"final\", \"finally\", \"float\", \"for\", \"foreach\", \"from\", \"global\", \"goto\", \"if\", \"implements\", \"instanceof\", \"insteadof\", \"int\", \"integer\", \"interface\", \"isset\", \"iterable\", \"list\", \"match|0\", \"mixed\", \"new\", \"never\", \"object\", \"or\", \"private\", \"protected\", \"public\", \"readonly\", \"real\", \"return\", \"string\", \"switch\", \"throw\", \"trait\", \"try\", \"unset\", \"use\", \"var\", \"void\", \"while\", \"xor\", \"yield\"], b = [\"Error|0\", \"AppendIterator\", \"ArgumentCountError\", \"ArithmeticError\", \"ArrayIterator\", \"ArrayObject\", \"AssertionError\", \"BadFunctionCallException\", \"BadMethodCallException\", \"CachingIterator\", \"CallbackFilterIterator\", \"CompileError\", \"Countable\", \"DirectoryIterator\", \"DivisionByZeroError\", \"DomainException\", \"EmptyIterator\", \"ErrorException\", \"Exception\", \"FilesystemIterator\", \"FilterIterator\", \"GlobIterator\", \"InfiniteIterator\", \"InvalidArgumentException\", \"IteratorIterator\", \"LengthException\", \"LimitIterator\", \"LogicException\", \"MultipleIterator\", \"NoRewindIterator\", \"OutOfBoundsException\", \"OutOfRangeException\", \"OuterIterator\", \"OverflowException\", \"ParentIterator\", \"ParseError\", \"RangeException\", \"RecursiveArrayIterator\", \"RecursiveCachingIterator\", \"RecursiveCallbackFilterIterator\", \"RecursiveDirectoryIterator\", \"RecursiveFilterIterator\", \"RecursiveIterator\", \"RecursiveIteratorIterator\", \"RecursiveRegexIterator\", \"RecursiveTreeIterator\", \"RegexIterator\", \"RuntimeException\", \"SeekableIterator\", \"SplDoublyLinkedList\", \"SplFileInfo\", \"SplFileObject\", \"SplFixedArray\", \"SplHeap\", \"SplMaxHeap\", \"SplMinHeap\", \"SplObjectStorage\", \"SplObserver\", \"SplPriorityQueue\", \"SplQueue\", \"SplStack\", \"SplSubject\", \"SplTempFileObject\", \"TypeError\", \"UnderflowException\", \"UnexpectedValueException\", \"UnhandledMatchError\", \"ArrayAccess\", \"BackedEnum\", \"Closure\", \"Fiber\", \"Generator\", \"Iterator\", \"IteratorAggregate\", \"Serializable\", \"Stringable\", \"Throwable\", \"Traversable\", \"UnitEnum\", \"WeakReference\", \"WeakMap\", \"Directory\", \"__PHP_Incomplete_Class\", \"parent\", \"php_user_filter\", \"self\", \"static\", \"stdClass\"], m = {\n          keyword: u, literal: (e => {\n            const n = []; return e.forEach((e => {\n              n.push(e), e.toLowerCase() === e ? n.push(e.toUpperCase()) : n.push(e.toLowerCase())\n            })), n\n          })(g), built_in: b\n        }, p = e => e.map((e => e.replace(/\\|\\d+$/, \"\"))), _ = {\n          variants: [{\n            match: [/new/, n.concat(l, \"+\"), n.concat(\"(?!\", p(b).join(\"\\\\b|\"), \"\\\\b)\"), i], scope: {\n              1: \"keyword\", 4: \"title.class\"\n            }\n          }]\n        }, h = n.concat(a, \"\\\\b(?!\\\\()\"), f = {\n          variants: [{\n            match: [n.concat(/::/, n.lookahead(/(?!class\\b)/)), h], scope: {\n              2: \"variable.constant\"\n            }\n          }, { match: [/::/, /class/], scope: { 2: \"variable.language\" } }, {\n            match: [i, n.concat(/::/, n.lookahead(/(?!class\\b)/)), h], scope: {\n              1: \"title.class\",\n              3: \"variable.constant\"\n            }\n          }, {\n            match: [i, n.concat(\"::\", n.lookahead(/(?!class\\b)/))],\n            scope: { 1: \"title.class\" }\n          }, {\n            match: [i, /::/, /class/], scope: {\n              1: \"title.class\",\n              3: \"variable.language\"\n            }\n          }]\n        }, E = {\n          scope: \"attr\",\n          match: n.concat(a, n.lookahead(\":\"), n.lookahead(/(?!::)/))\n        }, y = {\n          relevance: 0,\n          begin: /\\(/, end: /\\)/, keywords: m, contains: [E, r, f, e.C_BLOCK_COMMENT_MODE, c, d, _]\n        }, w = {\n          relevance: 0,\n          match: [/\\b/, n.concat(\"(?!fn\\\\b|function\\\\b|\", p(u).join(\"\\\\b|\"), \"|\", p(b).join(\"\\\\b|\"), \"\\\\b)\"), a, n.concat(l, \"*\"), n.lookahead(/(?=\\()/)],\n          scope: { 3: \"title.function.invoke\" }, contains: [y]\n        }; y.contains.push(w)\n          ; const N = [E, f, e.C_BLOCK_COMMENT_MODE, c, d, _]; return {\n            case_insensitive: !1,\n            keywords: m, contains: [{\n              begin: n.concat(/#\\[\\s*/, i), beginScope: \"meta\", end: /]/,\n              endScope: \"meta\", keywords: { literal: g, keyword: [\"new\", \"array\"] }, contains: [{\n                begin: /\\[/, end: /]/, keywords: { literal: g, keyword: [\"new\", \"array\"] },\n                contains: [\"self\", ...N]\n              }, ...N, { scope: \"meta\", match: i }]\n            }, e.HASH_COMMENT_MODE, e.COMMENT(\"//\", \"$\"), e.COMMENT(\"/\\\\*\", \"\\\\*/\", {\n              contains: [{\n                scope: \"doctag\", match: \"@[A-Za-z]+\"\n              }]\n            }), {\n              match: /__halt_compiler\\(\\);/,\n              keywords: \"__halt_compiler\", starts: {\n                scope: \"comment\", end: e.MATCH_NOTHING_RE,\n                contains: [{ match: /\\?>/, scope: \"meta\", endsParent: !0 }]\n              }\n            }, {\n              scope: \"meta\", variants: [{\n                begin: /<\\?php/, relevance: 10\n              }, { begin: /<\\?=/ }, { begin: /<\\?/, relevance: .1 }, {\n                begin: /\\?>/\n              }]\n            }, { scope: \"variable.language\", match: /\\$this\\b/ }, r, w, f, {\n              match: [/const/, /\\s/, a], scope: { 1: \"keyword\", 3: \"variable.constant\" }\n            }, _, {\n              scope: \"function\", relevance: 0, beginKeywords: \"fn function\", end: /[;{]/,\n              excludeEnd: !0, illegal: \"[$%\\\\[]\", contains: [{\n                beginKeywords: \"use\"\n              }, e.UNDERSCORE_TITLE_MODE, { begin: \"=>\", endsParent: !0 }, {\n                scope: \"params\",\n                begin: \"\\\\(\", end: \"\\\\)\", excludeBegin: !0, excludeEnd: !0, keywords: m,\n                contains: [\"self\", r, f, e.C_BLOCK_COMMENT_MODE, c, d]\n              }]\n            }, {\n              scope: \"class\", variants: [{\n                beginKeywords: \"enum\", illegal: /[($\"]/\n              }, {\n                beginKeywords: \"class interface trait\",\n                illegal: /[:($\"]/\n              }], relevance: 0, end: /\\{/, excludeEnd: !0, contains: [{\n                beginKeywords: \"extends implements\"\n              }, e.UNDERSCORE_TITLE_MODE]\n            }, {\n              beginKeywords: \"namespace\", relevance: 0, end: \";\", illegal: /[.']/,\n              contains: [e.inherit(e.UNDERSCORE_TITLE_MODE, { scope: \"title.class\" })]\n            }, {\n              beginKeywords: \"use\", relevance: 0, end: \";\", contains: [{\n                match: /\\b(as|const|function)\\b/, scope: \"keyword\"\n              }, e.UNDERSCORE_TITLE_MODE]\n            }, c, d]\n          }\n      }, grmr_php_template: e => ({\n        name: \"PHP template\", subLanguage: \"xml\", contains: [{\n          begin: /<\\?(php|=)?/, end: /\\?>/, subLanguage: \"php\", contains: [{\n            begin: \"/\\\\*\",\n            end: \"\\\\*/\", skip: !0\n          }, { begin: 'b\"', end: '\"', skip: !0 }, {\n            begin: \"b'\", end: \"'\", skip: !0\n          }, e.inherit(e.APOS_STRING_MODE, {\n            illegal: null, className: null, contains: null,\n            skip: !0\n          }), e.inherit(e.QUOTE_STRING_MODE, {\n            illegal: null, className: null,\n            contains: null, skip: !0\n          })]\n        }]\n      }), grmr_plaintext: e => ({\n        name: \"Plain text\",\n        aliases: [\"text\", \"txt\"], disableAutodetect: !0\n      }), grmr_python: e => {\n        const n = e.regex, t = /[\\p{XID_Start}_]\\p{XID_Continue}*/u, a = [\"and\", \"as\", \"assert\", \"async\", \"await\", \"break\", \"case\", \"class\", \"continue\", \"def\", \"del\", \"elif\", \"else\", \"except\", \"finally\", \"for\", \"from\", \"global\", \"if\", \"import\", \"in\", \"is\", \"lambda\", \"match\", \"nonlocal|10\", \"not\", \"or\", \"pass\", \"raise\", \"return\", \"try\", \"while\", \"with\", \"yield\"], i = {\n          $pattern: /[A-Za-z]\\w+|__\\w+__/, keyword: a,\n          built_in: [\"__import__\", \"abs\", \"all\", \"any\", \"ascii\", \"bin\", \"bool\", \"breakpoint\", \"bytearray\", \"bytes\", \"callable\", \"chr\", \"classmethod\", \"compile\", \"complex\", \"delattr\", \"dict\", \"dir\", \"divmod\", \"enumerate\", \"eval\", \"exec\", \"filter\", \"float\", \"format\", \"frozenset\", \"getattr\", \"globals\", \"hasattr\", \"hash\", \"help\", \"hex\", \"id\", \"input\", \"int\", \"isinstance\", \"issubclass\", \"iter\", \"len\", \"list\", \"locals\", \"map\", \"max\", \"memoryview\", \"min\", \"next\", \"object\", \"oct\", \"open\", \"ord\", \"pow\", \"print\", \"property\", \"range\", \"repr\", \"reversed\", \"round\", \"set\", \"setattr\", \"slice\", \"sorted\", \"staticmethod\", \"str\", \"sum\", \"super\", \"tuple\", \"type\", \"vars\", \"zip\"],\n          literal: [\"__debug__\", \"Ellipsis\", \"False\", \"None\", \"NotImplemented\", \"True\"],\n          type: [\"Any\", \"Callable\", \"Coroutine\", \"Dict\", \"List\", \"Literal\", \"Generic\", \"Optional\", \"Sequence\", \"Set\", \"Tuple\", \"Type\", \"Union\"]\n        }, r = { className: \"meta\", begin: /^(>>>|\\.\\.\\.) / }, s = {\n          className: \"subst\", begin: /\\{/,\n          end: /\\}/, keywords: i, illegal: /#/\n        }, o = { begin: /\\{\\{/, relevance: 0 }, l = {\n          className: \"string\", contains: [e.BACKSLASH_ESCAPE], variants: [{\n            begin: /([uU]|[bB]|[rR]|[bB][rR]|[rR][bB])?'''/, end: /'''/,\n            contains: [e.BACKSLASH_ESCAPE, r], relevance: 10\n          }, {\n            begin: /([uU]|[bB]|[rR]|[bB][rR]|[rR][bB])?\"\"\"/, end: /\"\"\"/,\n            contains: [e.BACKSLASH_ESCAPE, r], relevance: 10\n          }, {\n            begin: /([fF][rR]|[rR][fF]|[fF])'''/, end: /'''/,\n            contains: [e.BACKSLASH_ESCAPE, r, o, s]\n          }, {\n            begin: /([fF][rR]|[rR][fF]|[fF])\"\"\"/,\n            end: /\"\"\"/, contains: [e.BACKSLASH_ESCAPE, r, o, s]\n          }, {\n            begin: /([uU]|[rR])'/, end: /'/,\n            relevance: 10\n          }, { begin: /([uU]|[rR])\"/, end: /\"/, relevance: 10 }, {\n            begin: /([bB]|[bB][rR]|[rR][bB])'/, end: /'/\n          }, {\n            begin: /([bB]|[bB][rR]|[rR][bB])\"/,\n            end: /\"/\n          }, {\n            begin: /([fF][rR]|[rR][fF]|[fF])'/, end: /'/,\n            contains: [e.BACKSLASH_ESCAPE, o, s]\n          }, {\n            begin: /([fF][rR]|[rR][fF]|[fF])\"/, end: /\"/,\n            contains: [e.BACKSLASH_ESCAPE, o, s]\n          }, e.APOS_STRING_MODE, e.QUOTE_STRING_MODE]\n        }, c = \"[0-9](_?[0-9])*\", d = `(\\\\b(${c}))?\\\\.(${c})|\\\\b(${c})\\\\.`, g = \"\\\\b|\" + a.join(\"|\"), u = {\n          className: \"number\", relevance: 0, variants: [{\n            begin: `(\\\\b(${c})|(${d}))[eE][+-]?(${c})[jJ]?(?=${g})`\n          }, { begin: `(${d})[jJ]?` }, {\n            begin: `\\\\b([1-9](_?[0-9])*|0+(_?0)*)[lLjJ]?(?=${g})`\n          }, {\n            begin: `\\\\b0[bB](_?[01])+[lL]?(?=${g})`\n          }, {\n            begin: `\\\\b0[oO](_?[0-7])+[lL]?(?=${g})`\n          }, { begin: `\\\\b0[xX](_?[0-9a-fA-F])+[lL]?(?=${g})` }, {\n            begin: `\\\\b(${c})[jJ](?=${g})`\n          }]\n        }, b = {\n          className: \"comment\", begin: n.lookahead(/# type:/), end: /$/, keywords: i,\n          contains: [{ begin: /# type:/ }, { begin: /#/, end: /\\b\\B/, endsWithParent: !0 }]\n        }, m = {\n          className: \"params\", variants: [{ className: \"\", begin: /\\(\\s*\\)/, skip: !0 }, {\n            begin: /\\(/,\n            end: /\\)/, excludeBegin: !0, excludeEnd: !0, keywords: i,\n            contains: [\"self\", r, u, l, e.HASH_COMMENT_MODE]\n          }]\n        }; return s.contains = [l, u, r], {\n          name: \"Python\", aliases: [\"py\", \"gyp\", \"ipython\"], unicodeRegex: !0, keywords: i,\n          illegal: /(<\\/|->|\\?)|=>/, contains: [r, u, { begin: /\\bself\\b/ }, {\n            beginKeywords: \"if\",\n            relevance: 0\n          }, l, b, e.HASH_COMMENT_MODE, {\n              match: [/\\bdef/, /\\s+/, t], scope: {\n                1: \"keyword\", 3: \"title.function\"\n              }, contains: [m]\n            }, {\n              variants: [{\n                match: [/\\bclass/, /\\s+/, t, /\\s*/, /\\(\\s*/, t, /\\s*\\)/]\n              }, { match: [/\\bclass/, /\\s+/, t] }],\n              scope: { 1: \"keyword\", 3: \"title.class\", 6: \"title.class.inherited\" }\n            }, {\n              className: \"meta\", begin: /^[\\t ]*@/, end: /(?=#)|$/, contains: [u, m, l]\n            }]\n        }\n      },\n      grmr_python_repl: e => ({\n        aliases: [\"pycon\"], contains: [{\n          className: \"meta.prompt\",\n          starts: { end: / |$/, starts: { end: \"$\", subLanguage: \"python\" } }, variants: [{\n            begin: /^>>>(?=[ ]|$)/\n          }, { begin: /^\\.\\.\\.(?=[ ]|$)/ }]\n        }]\n      }), grmr_r: e => {\n        const n = e.regex, t = /(?:(?:[a-zA-Z]|\\.[._a-zA-Z])[._a-zA-Z0-9]*)|\\.(?!\\d)/, a = n.either(/0[xX][0-9a-fA-F]+\\.[0-9a-fA-F]*[pP][+-]?\\d+i?/, /0[xX][0-9a-fA-F]+(?:[pP][+-]?\\d+)?[Li]?/, /(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:[eE][+-]?\\d+)?[Li]?/), i = /[=!<>:]=|\\|\\||&&|:::?|<-|<<-|->>|->|\\|>|[-+*\\/?!$&|:<=>@^~]|\\*\\*/, r = n.either(/[()]/, /[{}]/, /\\[\\[/, /[[\\]]/, /\\\\/, /,/)\n          ; return {\n            name: \"R\", keywords: {\n              $pattern: t,\n              keyword: \"function if in break next repeat else for while\",\n              literal: \"NULL NA TRUE FALSE Inf NaN NA_integer_|10 NA_real_|10 NA_character_|10 NA_complex_|10\",\n              built_in: \"LETTERS letters month.abb month.name pi T F abs acos acosh all any anyNA Arg as.call as.character as.complex as.double as.environment as.integer as.logical as.null.default as.numeric as.raw asin asinh atan atanh attr attributes baseenv browser c call ceiling class Conj cos cosh cospi cummax cummin cumprod cumsum digamma dim dimnames emptyenv exp expression floor forceAndCall gamma gc.time globalenv Im interactive invisible is.array is.atomic is.call is.character is.complex is.double is.environment is.expression is.finite is.function is.infinite is.integer is.language is.list is.logical is.matrix is.na is.name is.nan is.null is.numeric is.object is.pairlist is.raw is.recursive is.single is.symbol lazyLoadDBfetch length lgamma list log max min missing Mod names nargs nzchar oldClass on.exit pos.to.env proc.time prod quote range Re rep retracemem return round seq_along seq_len seq.int sign signif sin sinh sinpi sqrt standardGeneric substitute sum switch tan tanh tanpi tracemem trigamma trunc unclass untracemem UseMethod xtfrm\"\n            }, contains: [e.COMMENT(/#'/, /$/, {\n              contains: [{\n                scope: \"doctag\", match: /@examples/,\n                starts: {\n                  end: n.lookahead(n.either(/\\n^#'\\s*(?=@[a-zA-Z]+)/, /\\n^(?!#')/)),\n                  endsParent: !0\n                }\n              }, {\n                scope: \"doctag\", begin: \"@param\", end: /$/, contains: [{\n                  scope: \"variable\", variants: [{ match: t }, { match: /`(?:\\\\.|[^`\\\\])+`/ }], endsParent: !0\n                }]\n              }, { scope: \"doctag\", match: /@[a-zA-Z]+/ }, { scope: \"keyword\", match: /\\\\[a-zA-Z]+/ }]\n            }), e.HASH_COMMENT_MODE, {\n              scope: \"string\", contains: [e.BACKSLASH_ESCAPE],\n              variants: [e.END_SAME_AS_BEGIN({\n                begin: /[rR]\"(-*)\\(/, end: /\\)(-*)\"/\n              }), e.END_SAME_AS_BEGIN({\n                begin: /[rR]\"(-*)\\{/, end: /\\}(-*)\"/\n              }), e.END_SAME_AS_BEGIN({\n                begin: /[rR]\"(-*)\\[/, end: /\\](-*)\"/\n              }), e.END_SAME_AS_BEGIN({\n                begin: /[rR]'(-*)\\(/, end: /\\)(-*)'/\n              }), e.END_SAME_AS_BEGIN({\n                begin: /[rR]'(-*)\\{/, end: /\\}(-*)'/\n              }), e.END_SAME_AS_BEGIN({ begin: /[rR]'(-*)\\[/, end: /\\](-*)'/ }), {\n                begin: '\"', end: '\"',\n                relevance: 0\n              }, { begin: \"'\", end: \"'\", relevance: 0 }]\n            }, {\n              relevance: 0, variants: [{\n                scope: {\n                  1: \"operator\", 2: \"number\"\n                }, match: [i, a]\n              }, {\n                scope: { 1: \"operator\", 2: \"number\" },\n                match: [/%[^%]*%/, a]\n              }, { scope: { 1: \"punctuation\", 2: \"number\" }, match: [r, a] }, {\n                scope: {\n                  2: \"number\"\n                }, match: [/[^a-zA-Z0-9._]|^/, a]\n              }]\n            }, {\n              scope: { 3: \"operator\" },\n              match: [t, /\\s+/, /<-/, /\\s+/]\n            }, {\n              scope: \"operator\", relevance: 0, variants: [{ match: i }, {\n                match: /%[^%]*%/\n              }]\n            }, { scope: \"punctuation\", relevance: 0, match: r }, {\n              begin: \"`\", end: \"`\",\n              contains: [{ begin: /\\\\./ }]\n            }]\n          }\n      }, grmr_ruby: e => {\n        const n = e.regex, t = \"([a-zA-Z_]\\\\w*[!?=]?|[-+~]@|<<|>>|=~|===?|<=>|[<>]=?|\\\\*\\\\*|[-/+%^&*~`|]|\\\\[\\\\]=?)\", a = n.either(/\\b([A-Z]+[a-z0-9]+)+/, /\\b([A-Z]+[a-z0-9]+)+[A-Z]+/), i = n.concat(a, /(::\\w+)*/), r = {\n          \"variable.constant\": [\"__FILE__\", \"__LINE__\", \"__ENCODING__\"],\n          \"variable.language\": [\"self\", \"super\"],\n          keyword: [\"alias\", \"and\", \"begin\", \"BEGIN\", \"break\", \"case\", \"class\", \"defined\", \"do\", \"else\", \"elsif\", \"end\", \"END\", \"ensure\", \"for\", \"if\", \"in\", \"module\", \"next\", \"not\", \"or\", \"redo\", \"require\", \"rescue\", \"retry\", \"return\", \"then\", \"undef\", \"unless\", \"until\", \"when\", \"while\", \"yield\", \"include\", \"extend\", \"prepend\", \"public\", \"private\", \"protected\", \"raise\", \"throw\"],\n          built_in: [\"proc\", \"lambda\", \"attr_accessor\", \"attr_reader\", \"attr_writer\", \"define_method\", \"private_constant\", \"module_function\"],\n          literal: [\"true\", \"false\", \"nil\"]\n        }, s = { className: \"doctag\", begin: \"@[A-Za-z]+\" }, o = {\n          begin: \"#<\", end: \">\"\n        }, l = [e.COMMENT(\"#\", \"$\", {\n          contains: [s]\n        }), e.COMMENT(\"^=begin\", \"^=end\", {\n          contains: [s], relevance: 10\n        }), e.COMMENT(\"^__END__\", e.MATCH_NOTHING_RE)], c = {\n          className: \"subst\", begin: /#\\{/,\n          end: /\\}/, keywords: r\n        }, d = {\n          className: \"string\", contains: [e.BACKSLASH_ESCAPE, c],\n          variants: [{ begin: /'/, end: /'/ }, { begin: /\"/, end: /\"/ }, { begin: /`/, end: /`/ }, {\n            begin: /%[qQwWx]?\\(/, end: /\\)/\n          }, { begin: /%[qQwWx]?\\[/, end: /\\]/ }, {\n            begin: /%[qQwWx]?\\{/, end: /\\}/\n          }, { begin: /%[qQwWx]?</, end: />/ }, {\n            begin: /%[qQwWx]?\\//,\n            end: /\\//\n          }, { begin: /%[qQwWx]?%/, end: /%/ }, { begin: /%[qQwWx]?-/, end: /-/ }, {\n            begin: /%[qQwWx]?\\|/, end: /\\|/\n          }, { begin: /\\B\\?(\\\\\\d{1,3})/ }, {\n            begin: /\\B\\?(\\\\x[A-Fa-f0-9]{1,2})/\n          }, { begin: /\\B\\?(\\\\u\\{?[A-Fa-f0-9]{1,6}\\}?)/ }, {\n            begin: /\\B\\?(\\\\M-\\\\C-|\\\\M-\\\\c|\\\\c\\\\M-|\\\\M-|\\\\C-\\\\M-)[\\x20-\\x7e]/\n          }, {\n            begin: /\\B\\?\\\\(c|C-)[\\x20-\\x7e]/\n          }, { begin: /\\B\\?\\\\?\\S/ }, {\n            begin: n.concat(/<<[-~]?'?/, n.lookahead(/(\\w+)(?=\\W)[^\\n]*\\n(?:[^\\n]*\\n)*?\\s*\\1\\b/)),\n            contains: [e.END_SAME_AS_BEGIN({\n              begin: /(\\w+)/, end: /(\\w+)/,\n              contains: [e.BACKSLASH_ESCAPE, c]\n            })]\n          }]\n        }, g = \"[0-9](_?[0-9])*\", u = {\n          className: \"number\",\n          relevance: 0, variants: [{\n            begin: `\\\\b([1-9](_?[0-9])*|0)(\\\\.(${g}))?([eE][+-]?(${g})|r)?i?\\\\b`\n          }, {\n            begin: \"\\\\b0[dD][0-9](_?[0-9])*r?i?\\\\b\"\n          }, {\n            begin: \"\\\\b0[bB][0-1](_?[0-1])*r?i?\\\\b\"\n          }, { begin: \"\\\\b0[oO][0-7](_?[0-7])*r?i?\\\\b\" }, {\n            begin: \"\\\\b0[xX][0-9a-fA-F](_?[0-9a-fA-F])*r?i?\\\\b\"\n          }, {\n            begin: \"\\\\b0(_?[0-7])+r?i?\\\\b\"\n          }]\n        }, b = {\n          variants: [{ match: /\\(\\)/ }, {\n            className: \"params\", begin: /\\(/, end: /(?=\\))/, excludeBegin: !0, endsParent: !0,\n            keywords: r\n          }]\n        }, m = [d, {\n          variants: [{ match: [/class\\s+/, i, /\\s+<\\s+/, i] }, {\n            match: [/\\b(class|module)\\s+/, i]\n          }], scope: {\n            2: \"title.class\",\n            4: \"title.class.inherited\"\n          }, keywords: r\n        }, {\n            match: [/(include|extend)\\s+/, i], scope: {\n              2: \"title.class\"\n            }, keywords: r\n          }, {\n            relevance: 0, match: [i, /\\.new[. (]/], scope: {\n              1: \"title.class\"\n            }\n          }, {\n            relevance: 0, match: /\\b[A-Z][A-Z_0-9]+\\b/,\n            className: \"variable.constant\"\n          }, { relevance: 0, match: a, scope: \"title.class\" }, {\n            match: [/def/, /\\s+/, t], scope: { 1: \"keyword\", 3: \"title.function\" }, contains: [b]\n          }, {\n            begin: e.IDENT_RE + \"::\"\n          }, {\n            className: \"symbol\",\n            begin: e.UNDERSCORE_IDENT_RE + \"(!|\\\\?)?:\", relevance: 0\n          }, {\n            className: \"symbol\",\n            begin: \":(?!\\\\s)\", contains: [d, { begin: t }], relevance: 0\n          }, u, {\n            className: \"variable\",\n            begin: \"(\\\\$\\\\W)|((\\\\$|@@?)(\\\\w+))(?=[^@$?])(?![A-Za-z])(?![@$?'])\"\n          }, {\n            className: \"params\", begin: /\\|/, end: /\\|/, excludeBegin: !0, excludeEnd: !0,\n            relevance: 0, keywords: r\n          }, {\n            begin: \"(\" + e.RE_STARTERS_RE + \"|unless)\\\\s*\",\n            keywords: \"unless\", contains: [{\n              className: \"regexp\", contains: [e.BACKSLASH_ESCAPE, c],\n              illegal: /\\n/, variants: [{ begin: \"/\", end: \"/[a-z]*\" }, { begin: /%r\\{/, end: /\\}[a-z]*/ }, {\n                begin: \"%r\\\\(\", end: \"\\\\)[a-z]*\"\n              }, { begin: \"%r!\", end: \"![a-z]*\" }, {\n                begin: \"%r\\\\[\",\n                end: \"\\\\][a-z]*\"\n              }]\n            }].concat(o, l), relevance: 0\n          }].concat(o, l)\n          ; c.contains = m, b.contains = m; const p = [{\n            begin: /^\\s*=>/, starts: { end: \"$\", contains: m }\n          }, {\n            className: \"meta.prompt\",\n            begin: \"^([>?]>|[\\\\w#]+\\\\(\\\\w+\\\\):\\\\d+:\\\\d+[>*]|(\\\\w+-)?\\\\d+\\\\.\\\\d+\\\\.\\\\d+(p\\\\d+)?[^\\\\d][^>]+>)(?=[ ])\",\n            starts: { end: \"$\", keywords: r, contains: m }\n          }]; return l.unshift(o), {\n            name: \"Ruby\",\n            aliases: [\"rb\", \"gemspec\", \"podspec\", \"thor\", \"irb\"], keywords: r, illegal: /\\/\\*/,\n            contains: [e.SHEBANG({ binary: \"ruby\" })].concat(p).concat(l).concat(m)\n          }\n      },\n      grmr_rust: e => {\n        const n = e.regex, t = {\n          className: \"title.function.invoke\", relevance: 0,\n          begin: n.concat(/\\b/, /(?!let\\b)/, e.IDENT_RE, n.lookahead(/\\s*\\(/))\n        }, a = \"([ui](8|16|32|64|128|size)|f(32|64))?\", i = [\"drop \", \"Copy\", \"Send\", \"Sized\", \"Sync\", \"Drop\", \"Fn\", \"FnMut\", \"FnOnce\", \"ToOwned\", \"Clone\", \"Debug\", \"PartialEq\", \"PartialOrd\", \"Eq\", \"Ord\", \"AsRef\", \"AsMut\", \"Into\", \"From\", \"Default\", \"Iterator\", \"Extend\", \"IntoIterator\", \"DoubleEndedIterator\", \"ExactSizeIterator\", \"SliceConcatExt\", \"ToString\", \"assert!\", \"assert_eq!\", \"bitflags!\", \"bytes!\", \"cfg!\", \"col!\", \"concat!\", \"concat_idents!\", \"debug_assert!\", \"debug_assert_eq!\", \"env!\", \"panic!\", \"file!\", \"format!\", \"format_args!\", \"include_bytes!\", \"include_str!\", \"line!\", \"local_data_key!\", \"module_path!\", \"option_env!\", \"print!\", \"println!\", \"select!\", \"stringify!\", \"try!\", \"unimplemented!\", \"unreachable!\", \"vec!\", \"write!\", \"writeln!\", \"macro_rules!\", \"assert_ne!\", \"debug_assert_ne!\"], r = [\"i8\", \"i16\", \"i32\", \"i64\", \"i128\", \"isize\", \"u8\", \"u16\", \"u32\", \"u64\", \"u128\", \"usize\", \"f32\", \"f64\", \"str\", \"char\", \"bool\", \"Box\", \"Option\", \"Result\", \"String\", \"Vec\"]\n          ; return {\n            name: \"Rust\", aliases: [\"rs\"], keywords: {\n              $pattern: e.IDENT_RE + \"!?\", type: r,\n              keyword: [\"abstract\", \"as\", \"async\", \"await\", \"become\", \"box\", \"break\", \"const\", \"continue\", \"crate\", \"do\", \"dyn\", \"else\", \"enum\", \"extern\", \"false\", \"final\", \"fn\", \"for\", \"if\", \"impl\", \"in\", \"let\", \"loop\", \"macro\", \"match\", \"mod\", \"move\", \"mut\", \"override\", \"priv\", \"pub\", \"ref\", \"return\", \"self\", \"Self\", \"static\", \"struct\", \"super\", \"trait\", \"true\", \"try\", \"type\", \"typeof\", \"unsafe\", \"unsized\", \"use\", \"virtual\", \"where\", \"while\", \"yield\"],\n              literal: [\"true\", \"false\", \"Some\", \"None\", \"Ok\", \"Err\"], built_in: i\n            }, illegal: \"</\",\n            contains: [e.C_LINE_COMMENT_MODE, e.COMMENT(\"/\\\\*\", \"\\\\*/\", {\n              contains: [\"self\"]\n            }), e.inherit(e.QUOTE_STRING_MODE, { begin: /b?\"/, illegal: null }), {\n              className: \"string\", variants: [{ begin: /b?r(#*)\"(.|\\n)*?\"\\1(?!#)/ }, {\n                begin: /b?'\\\\?(x\\w{2}|u\\w{4}|U\\w{8}|.)'/\n              }]\n            }, {\n              className: \"symbol\",\n              begin: /'[a-zA-Z_][a-zA-Z0-9_]*/\n            }, {\n              className: \"number\", variants: [{\n                begin: \"\\\\b0b([01_]+)\" + a\n              }, { begin: \"\\\\b0o([0-7_]+)\" + a }, {\n                begin: \"\\\\b0x([A-Fa-f0-9_]+)\" + a\n              }, {\n                begin: \"\\\\b(\\\\d[\\\\d_]*(\\\\.[0-9_]+)?([eE][+-]?[0-9_]+)?)\" + a\n              }], relevance: 0\n            }, {\n              begin: [/fn/, /\\s+/, e.UNDERSCORE_IDENT_RE], className: {\n                1: \"keyword\",\n                3: \"title.function\"\n              }\n            }, {\n              className: \"meta\", begin: \"#!?\\\\[\", end: \"\\\\]\", contains: [{\n                className: \"string\", begin: /\"/, end: /\"/\n              }]\n            }, {\n              begin: [/let/, /\\s+/, /(?:mut\\s+)?/, e.UNDERSCORE_IDENT_RE], className: {\n                1: \"keyword\",\n                3: \"keyword\", 4: \"variable\"\n              }\n            }, {\n              begin: [/for/, /\\s+/, e.UNDERSCORE_IDENT_RE, /\\s+/, /in/], className: {\n                1: \"keyword\",\n                3: \"variable\", 5: \"keyword\"\n              }\n            }, {\n              begin: [/type/, /\\s+/, e.UNDERSCORE_IDENT_RE],\n              className: { 1: \"keyword\", 3: \"title.class\" }\n            }, {\n              begin: [/(?:trait|enum|struct|union|impl|for)/, /\\s+/, e.UNDERSCORE_IDENT_RE],\n              className: { 1: \"keyword\", 3: \"title.class\" }\n            }, {\n              begin: e.IDENT_RE + \"::\", keywords: {\n                keyword: \"Self\", built_in: i, type: r\n              }\n            }, { className: \"punctuation\", begin: \"->\" }, t]\n          }\n      },\n      grmr_scss: e => {\n        const n = te(e), t = se, a = re, i = \"@[a-z-]+\", r = {\n          className: \"variable\",\n          begin: \"(\\\\$[a-zA-Z-][a-zA-Z0-9_-]*)\\\\b\", relevance: 0\n        }; return {\n          name: \"SCSS\",\n          case_insensitive: !0, illegal: \"[=/|']\",\n          contains: [e.C_LINE_COMMENT_MODE, e.C_BLOCK_COMMENT_MODE, n.CSS_NUMBER_MODE, {\n            className: \"selector-id\", begin: \"#[A-Za-z0-9_-]+\", relevance: 0\n          }, {\n            className: \"selector-class\", begin: \"\\\\.[A-Za-z0-9_-]+\", relevance: 0\n          }, n.ATTRIBUTE_SELECTOR_MODE, {\n            className: \"selector-tag\",\n            begin: \"\\\\b(\" + ae.join(\"|\") + \")\\\\b\", relevance: 0\n          }, {\n            className: \"selector-pseudo\",\n            begin: \":(\" + a.join(\"|\") + \")\"\n          }, {\n            className: \"selector-pseudo\",\n            begin: \":(:)?(\" + t.join(\"|\") + \")\"\n          }, r, {\n            begin: /\\(/, end: /\\)/,\n            contains: [n.CSS_NUMBER_MODE]\n          }, n.CSS_VARIABLE, {\n            className: \"attribute\",\n            begin: \"\\\\b(\" + oe.join(\"|\") + \")\\\\b\"\n          }, {\n            begin: \"\\\\b(whitespace|wait|w-resize|visible|vertical-text|vertical-ideographic|uppercase|upper-roman|upper-alpha|underline|transparent|top|thin|thick|text|text-top|text-bottom|tb-rl|table-header-group|table-footer-group|sw-resize|super|strict|static|square|solid|small-caps|separate|se-resize|scroll|s-resize|rtl|row-resize|ridge|right|repeat|repeat-y|repeat-x|relative|progress|pointer|overline|outside|outset|oblique|nowrap|not-allowed|normal|none|nw-resize|no-repeat|no-drop|newspaper|ne-resize|n-resize|move|middle|medium|ltr|lr-tb|lowercase|lower-roman|lower-alpha|loose|list-item|line|line-through|line-edge|lighter|left|keep-all|justify|italic|inter-word|inter-ideograph|inside|inset|inline|inline-block|inherit|inactive|ideograph-space|ideograph-parenthesis|ideograph-numeric|ideograph-alpha|horizontal|hidden|help|hand|groove|fixed|ellipsis|e-resize|double|dotted|distribute|distribute-space|distribute-letter|distribute-all-lines|disc|disabled|default|decimal|dashed|crosshair|collapse|col-resize|circle|char|center|capitalize|break-word|break-all|bottom|both|bolder|bold|block|bidi-override|below|baseline|auto|always|all-scroll|absolute|table|table-cell)\\\\b\"\n          }, {\n            begin: /:/, end: /[;}{]/, relevance: 0,\n            contains: [n.BLOCK_COMMENT, r, n.HEXCOLOR, n.CSS_NUMBER_MODE, e.QUOTE_STRING_MODE, e.APOS_STRING_MODE, n.IMPORTANT, n.FUNCTION_DISPATCH]\n          }, { begin: \"@(page|font-face)\", keywords: { $pattern: i, keyword: \"@page @font-face\" } }, {\n            begin: \"@\", end: \"[{;]\", returnBegin: !0, keywords: {\n              $pattern: /[a-z-]+/,\n              keyword: \"and or not only\", attribute: ie.join(\" \")\n            }, contains: [{\n              begin: i,\n              className: \"keyword\"\n            }, {\n              begin: /[a-z-]+(?=:)/, className: \"attribute\"\n            }, r, e.QUOTE_STRING_MODE, e.APOS_STRING_MODE, n.HEXCOLOR, n.CSS_NUMBER_MODE]\n          }, n.FUNCTION_DISPATCH]\n        }\n      }, grmr_shell: e => ({\n        name: \"Shell Session\",\n        aliases: [\"console\", \"shellsession\"], contains: [{\n          className: \"meta.prompt\",\n          begin: /^\\s{0,3}[/~\\w\\d[\\]()@-]*[>%$#][ ]?/, starts: {\n            end: /[^\\\\](?=\\s*$)/,\n            subLanguage: \"bash\"\n          }\n        }]\n      }), grmr_sql: e => {\n        const n = e.regex, t = e.COMMENT(\"--\", \"$\"), a = [\"true\", \"false\", \"unknown\"], i = [\"bigint\", \"binary\", \"blob\", \"boolean\", \"char\", \"character\", \"clob\", \"date\", \"dec\", \"decfloat\", \"decimal\", \"float\", \"int\", \"integer\", \"interval\", \"nchar\", \"nclob\", \"national\", \"numeric\", \"real\", \"row\", \"smallint\", \"time\", \"timestamp\", \"varchar\", \"varying\", \"varbinary\"], r = [\"abs\", \"acos\", \"array_agg\", \"asin\", \"atan\", \"avg\", \"cast\", \"ceil\", \"ceiling\", \"coalesce\", \"corr\", \"cos\", \"cosh\", \"count\", \"covar_pop\", \"covar_samp\", \"cume_dist\", \"dense_rank\", \"deref\", \"element\", \"exp\", \"extract\", \"first_value\", \"floor\", \"json_array\", \"json_arrayagg\", \"json_exists\", \"json_object\", \"json_objectagg\", \"json_query\", \"json_table\", \"json_table_primitive\", \"json_value\", \"lag\", \"last_value\", \"lead\", \"listagg\", \"ln\", \"log\", \"log10\", \"lower\", \"max\", \"min\", \"mod\", \"nth_value\", \"ntile\", \"nullif\", \"percent_rank\", \"percentile_cont\", \"percentile_disc\", \"position\", \"position_regex\", \"power\", \"rank\", \"regr_avgx\", \"regr_avgy\", \"regr_count\", \"regr_intercept\", \"regr_r2\", \"regr_slope\", \"regr_sxx\", \"regr_sxy\", \"regr_syy\", \"row_number\", \"sin\", \"sinh\", \"sqrt\", \"stddev_pop\", \"stddev_samp\", \"substring\", \"substring_regex\", \"sum\", \"tan\", \"tanh\", \"translate\", \"translate_regex\", \"treat\", \"trim\", \"trim_array\", \"unnest\", \"upper\", \"value_of\", \"var_pop\", \"var_samp\", \"width_bucket\"], s = [\"create table\", \"insert into\", \"primary key\", \"foreign key\", \"not null\", \"alter table\", \"add constraint\", \"grouping sets\", \"on overflow\", \"character set\", \"respect nulls\", \"ignore nulls\", \"nulls first\", \"nulls last\", \"depth first\", \"breadth first\"], o = r, l = [\"abs\", \"acos\", \"all\", \"allocate\", \"alter\", \"and\", \"any\", \"are\", \"array\", \"array_agg\", \"array_max_cardinality\", \"as\", \"asensitive\", \"asin\", \"asymmetric\", \"at\", \"atan\", \"atomic\", \"authorization\", \"avg\", \"begin\", \"begin_frame\", \"begin_partition\", \"between\", \"bigint\", \"binary\", \"blob\", \"boolean\", \"both\", \"by\", \"call\", \"called\", \"cardinality\", \"cascaded\", \"case\", \"cast\", \"ceil\", \"ceiling\", \"char\", \"char_length\", \"character\", \"character_length\", \"check\", \"classifier\", \"clob\", \"close\", \"coalesce\", \"collate\", \"collect\", \"column\", \"commit\", \"condition\", \"connect\", \"constraint\", \"contains\", \"convert\", \"copy\", \"corr\", \"corresponding\", \"cos\", \"cosh\", \"count\", \"covar_pop\", \"covar_samp\", \"create\", \"cross\", \"cube\", \"cume_dist\", \"current\", \"current_catalog\", \"current_date\", \"current_default_transform_group\", \"current_path\", \"current_role\", \"current_row\", \"current_schema\", \"current_time\", \"current_timestamp\", \"current_path\", \"current_role\", \"current_transform_group_for_type\", \"current_user\", \"cursor\", \"cycle\", \"date\", \"day\", \"deallocate\", \"dec\", \"decimal\", \"decfloat\", \"declare\", \"default\", \"define\", \"delete\", \"dense_rank\", \"deref\", \"describe\", \"deterministic\", \"disconnect\", \"distinct\", \"double\", \"drop\", \"dynamic\", \"each\", \"element\", \"else\", \"empty\", \"end\", \"end_frame\", \"end_partition\", \"end-exec\", \"equals\", \"escape\", \"every\", \"except\", \"exec\", \"execute\", \"exists\", \"exp\", \"external\", \"extract\", \"false\", \"fetch\", \"filter\", \"first_value\", \"float\", \"floor\", \"for\", \"foreign\", \"frame_row\", \"free\", \"from\", \"full\", \"function\", \"fusion\", \"get\", \"global\", \"grant\", \"group\", \"grouping\", \"groups\", \"having\", \"hold\", \"hour\", \"identity\", \"in\", \"indicator\", \"initial\", \"inner\", \"inout\", \"insensitive\", \"insert\", \"int\", \"integer\", \"intersect\", \"intersection\", \"interval\", \"into\", \"is\", \"join\", \"json_array\", \"json_arrayagg\", \"json_exists\", \"json_object\", \"json_objectagg\", \"json_query\", \"json_table\", \"json_table_primitive\", \"json_value\", \"lag\", \"language\", \"large\", \"last_value\", \"lateral\", \"lead\", \"leading\", \"left\", \"like\", \"like_regex\", \"listagg\", \"ln\", \"local\", \"localtime\", \"localtimestamp\", \"log\", \"log10\", \"lower\", \"match\", \"match_number\", \"match_recognize\", \"matches\", \"max\", \"member\", \"merge\", \"method\", \"min\", \"minute\", \"mod\", \"modifies\", \"module\", \"month\", \"multiset\", \"national\", \"natural\", \"nchar\", \"nclob\", \"new\", \"no\", \"none\", \"normalize\", \"not\", \"nth_value\", \"ntile\", \"null\", \"nullif\", \"numeric\", \"octet_length\", \"occurrences_regex\", \"of\", \"offset\", \"old\", \"omit\", \"on\", \"one\", \"only\", \"open\", \"or\", \"order\", \"out\", \"outer\", \"over\", \"overlaps\", \"overlay\", \"parameter\", \"partition\", \"pattern\", \"per\", \"percent\", \"percent_rank\", \"percentile_cont\", \"percentile_disc\", \"period\", \"portion\", \"position\", \"position_regex\", \"power\", \"precedes\", \"precision\", \"prepare\", \"primary\", \"procedure\", \"ptf\", \"range\", \"rank\", \"reads\", \"real\", \"recursive\", \"ref\", \"references\", \"referencing\", \"regr_avgx\", \"regr_avgy\", \"regr_count\", \"regr_intercept\", \"regr_r2\", \"regr_slope\", \"regr_sxx\", \"regr_sxy\", \"regr_syy\", \"release\", \"result\", \"return\", \"returns\", \"revoke\", \"right\", \"rollback\", \"rollup\", \"row\", \"row_number\", \"rows\", \"running\", \"savepoint\", \"scope\", \"scroll\", \"search\", \"second\", \"seek\", \"select\", \"sensitive\", \"session_user\", \"set\", \"show\", \"similar\", \"sin\", \"sinh\", \"skip\", \"smallint\", \"some\", \"specific\", \"specifictype\", \"sql\", \"sqlexception\", \"sqlstate\", \"sqlwarning\", \"sqrt\", \"start\", \"static\", \"stddev_pop\", \"stddev_samp\", \"submultiset\", \"subset\", \"substring\", \"substring_regex\", \"succeeds\", \"sum\", \"symmetric\", \"system\", \"system_time\", \"system_user\", \"table\", \"tablesample\", \"tan\", \"tanh\", \"then\", \"time\", \"timestamp\", \"timezone_hour\", \"timezone_minute\", \"to\", \"trailing\", \"translate\", \"translate_regex\", \"translation\", \"treat\", \"trigger\", \"trim\", \"trim_array\", \"true\", \"truncate\", \"uescape\", \"union\", \"unique\", \"unknown\", \"unnest\", \"update\", \"upper\", \"user\", \"using\", \"value\", \"values\", \"value_of\", \"var_pop\", \"var_samp\", \"varbinary\", \"varchar\", \"varying\", \"versioning\", \"when\", \"whenever\", \"where\", \"width_bucket\", \"window\", \"with\", \"within\", \"without\", \"year\", \"add\", \"asc\", \"collation\", \"desc\", \"final\", \"first\", \"last\", \"view\"].filter((e => !r.includes(e))), c = {\n          begin: n.concat(/\\b/, n.either(...o), /\\s*\\(/), relevance: 0, keywords: { built_in: o }\n        }\n          ; return {\n            name: \"SQL\", case_insensitive: !0, illegal: /[{}]|<\\//, keywords: {\n              $pattern: /\\b[\\w\\.]+/, keyword: ((e, { exceptions: n, when: t } = {}) => {\n                const a = t\n                  ; return n = n || [], e.map((e => e.match(/\\|\\d+$/) || n.includes(e) ? e : a(e) ? e + \"|0\" : e))\n              })(l, { when: e => e.length < 3 }), literal: a, type: i,\n              built_in: [\"current_catalog\", \"current_date\", \"current_default_transform_group\", \"current_path\", \"current_role\", \"current_schema\", \"current_transform_group_for_type\", \"current_user\", \"session_user\", \"system_time\", \"system_user\", \"current_time\", \"localtime\", \"current_timestamp\", \"localtimestamp\"]\n            }, contains: [{\n              begin: n.either(...s), relevance: 0, keywords: {\n                $pattern: /[\\w\\.]+/,\n                keyword: l.concat(s), literal: a, type: i\n              }\n            }, {\n              className: \"type\",\n              begin: n.either(\"double precision\", \"large object\", \"with timezone\", \"without timezone\")\n            }, c, { className: \"variable\", begin: /@[a-z0-9]+/ }, {\n              className: \"string\", variants: [{\n                begin: /'/, end: /'/, contains: [{ begin: /''/ }]\n              }]\n            }, {\n              begin: /\"/, end: /\"/, contains: [{\n                begin: /\"\"/\n              }]\n            }, e.C_NUMBER_MODE, e.C_BLOCK_COMMENT_MODE, t, {\n              className: \"operator\",\n              begin: /[-+*/=%^~]|&&?|\\|\\|?|!=?|<(?:=>?|<|>)?|>[>=]?/, relevance: 0\n            }]\n          }\n      },\n      grmr_swift: e => {\n        const n = { match: /\\s+/, relevance: 0 }, t = e.COMMENT(\"/\\\\*\", \"\\\\*/\", {\n          contains: [\"self\"]\n        }), a = [e.C_LINE_COMMENT_MODE, t], i = {\n          match: [/\\./, p(...ve, ...Oe)],\n          className: { 2: \"keyword\" }\n        }, r = {\n          match: m(/\\./, p(...xe)), relevance: 0\n        }, s = xe.filter((e => \"string\" == typeof e)).concat([\"_|0\"]), o = {\n          variants: [{\n            className: \"keyword\",\n            match: p(...xe.filter((e => \"string\" != typeof e)).concat(ke).map(Ne), ...Oe)\n          }]\n        }, l = {\n          $pattern: p(/\\b\\w+/, /#\\w+/), keyword: s.concat(Ae), literal: Me\n        }, c = [i, r, o], d = [{\n          match: m(/\\./, p(...Ce)), relevance: 0\n        }, {\n          className: \"built_in\",\n          match: m(/\\b/, p(...Ce), /(?=\\()/)\n        }], u = { match: /->/, relevance: 0 }, b = [u, {\n          className: \"operator\", relevance: 0, variants: [{ match: De }, { match: `\\\\.(\\\\.|${Re})+` }]\n        }], _ = \"([0-9a-fA-F]_*)+\", h = {\n          className: \"number\", relevance: 0, variants: [{\n            match: \"\\\\b(([0-9]_*)+)(\\\\.(([0-9]_*)+))?([eE][+-]?(([0-9]_*)+))?\\\\b\"\n          }, {\n            match: `\\\\b0x(${_})(\\\\.(${_}))?([pP][+-]?(([0-9]_*)+))?\\\\b`\n          }, {\n            match: /\\b0o([0-7]_*)+\\b/\n          }, { match: /\\b0b([01]_*)+\\b/ }]\n        }, f = (e = \"\") => ({\n          className: \"subst\", variants: [{ match: m(/\\\\/, e, /[0\\\\tnr\"']/) }, {\n            match: m(/\\\\/, e, /u\\{[0-9a-fA-F]{1,8}\\}/)\n          }]\n        }), E = (e = \"\") => ({\n          className: \"subst\",\n          match: m(/\\\\/, e, /[\\t ]*(?:[\\r\\n]|\\r\\n)/)\n        }), y = (e = \"\") => ({\n          className: \"subst\",\n          label: \"interpol\", begin: m(/\\\\/, e, /\\(/), end: /\\)/\n        }), w = (e = \"\") => ({\n          begin: m(e, /\"\"\"/),\n          end: m(/\"\"\"/, e), contains: [f(e), E(e), y(e)]\n        }), N = (e = \"\") => ({\n          begin: m(e, /\"/),\n          end: m(/\"/, e), contains: [f(e), y(e)]\n        }), v = {\n          className: \"string\",\n          variants: [w(), w(\"#\"), w(\"##\"), w(\"###\"), N(), N(\"#\"), N(\"##\"), N(\"###\")]\n        }, O = {\n          match: m(/`/, Be, /`/)\n        }, k = [O, { className: \"variable\", match: /\\$\\d+/ }, {\n          className: \"variable\", match: `\\\\$${Le}+`\n        }], x = [{\n          match: /(@|#(un)?)available/,\n          className: \"keyword\", starts: {\n            contains: [{\n              begin: /\\(/, end: /\\)/, keywords: Fe,\n              contains: [...b, h, v]\n            }]\n          }\n        }, { className: \"keyword\", match: m(/@/, p(...ze)) }, {\n          className: \"meta\", match: m(/@/, Be)\n        }], M = {\n          match: g(/\\b[A-Z]/), relevance: 0, contains: [{\n            className: \"type\",\n            match: m(/(AV|CA|CF|CG|CI|CL|CM|CN|CT|MK|MP|MTK|MTL|NS|SCN|SK|UI|WK|XC)/, Le, \"+\")\n          }, { className: \"type\", match: $e, relevance: 0 }, { match: /[?!]+/, relevance: 0 }, {\n            match: /\\.\\.\\./, relevance: 0\n          }, { match: m(/\\s+&\\s+/, g($e)), relevance: 0 }]\n        }, S = {\n          begin: /</, end: />/, keywords: l, contains: [...a, ...c, ...x, u, M]\n        }; M.contains.push(S)\n          ; const A = {\n            begin: /\\(/, end: /\\)/, relevance: 0, keywords: l, contains: [\"self\", {\n              match: m(Be, /\\s*:/), keywords: \"_|0\", relevance: 0\n            }, ...a, ...c, ...d, ...b, h, v, ...k, ...x, M]\n          }, C = {\n            begin: /</, end: />/, contains: [...a, M]\n          }, T = {\n            begin: /\\(/, end: /\\)/, keywords: l, contains: [{\n              begin: p(g(m(Be, /\\s*:/)), g(m(Be, /\\s+/, Be, /\\s*:/))), end: /:/, relevance: 0,\n              contains: [{ className: \"keyword\", match: /\\b_\\b/ }, { className: \"params\", match: Be }]\n            }, ...a, ...c, ...b, h, v, ...x, M, A], endsParent: !0, illegal: /[\"']/\n          }, R = {\n            match: [/func/, /\\s+/, p(O.match, Be, De)], className: {\n              1: \"keyword\", 3: \"title.function\"\n            }, contains: [C, T, n], illegal: [/\\[/, /%/]\n          }, D = {\n            match: [/\\b(?:subscript|init[?!]?)/, /\\s*(?=[<(])/], className: { 1: \"keyword\" },\n            contains: [C, T, n], illegal: /\\[|%/\n          }, I = {\n            match: [/operator/, /\\s+/, De], className: {\n              1: \"keyword\", 3: \"title\"\n            }\n          }, L = {\n            begin: [/precedencegroup/, /\\s+/, $e], className: {\n              1: \"keyword\", 3: \"title\"\n            }, contains: [M], keywords: [...Se, ...Me], end: /}/\n          }\n          ; for (const e of v.variants) {\n            const n = e.contains.find((e => \"interpol\" === e.label))\n              ; n.keywords = l; const t = [...c, ...d, ...b, h, v, ...k]; n.contains = [...t, {\n                begin: /\\(/,\n                end: /\\)/, contains: [\"self\", ...t]\n              }]\n          } return {\n            name: \"Swift\", keywords: l,\n            contains: [...a, R, D, {\n              beginKeywords: \"struct protocol class extension enum actor\",\n              end: \"\\\\{\", excludeEnd: !0, keywords: l, contains: [e.inherit(e.TITLE_MODE, {\n                className: \"title.class\", begin: /[A-Za-z$_][\\u00C0-\\u02B80-9A-Za-z$_]*/\n              }), ...c]\n            }, I, L, {\n              beginKeywords: \"import\", end: /$/, contains: [...a], relevance: 0\n            }, ...c, ...d, ...b, h, v, ...k, ...x, M, A]\n          }\n      }, grmr_typescript: e => {\n        const n = we(e), t = [\"any\", \"void\", \"number\", \"boolean\", \"string\", \"object\", \"never\", \"symbol\", \"bigint\", \"unknown\"], a = {\n          beginKeywords: \"namespace\", end: /\\{/, excludeEnd: !0,\n          contains: [n.exports.CLASS_REFERENCE]\n        }, i = {\n          beginKeywords: \"interface\", end: /\\{/,\n          excludeEnd: !0, keywords: { keyword: \"interface extends\", built_in: t },\n          contains: [n.exports.CLASS_REFERENCE]\n        }, r = {\n          $pattern: be,\n          keyword: me.concat([\"type\", \"namespace\", \"interface\", \"public\", \"private\", \"protected\", \"implements\", \"declare\", \"abstract\", \"readonly\", \"enum\", \"override\"]),\n          literal: pe, built_in: ye.concat(t), \"variable.language\": Ee\n        }, s = {\n          className: \"meta\",\n          begin: \"@[A-Za-z$_][0-9A-Za-z$_]*\"\n        }, o = (e, n, t) => {\n          const a = e.contains.findIndex((e => e.label === n))\n            ; if (-1 === a) throw Error(\"can not find mode to replace\"); e.contains.splice(a, 1, t)\n        }\n          ; return Object.assign(n.keywords, r),\n            n.exports.PARAMS_CONTAINS.push(s), n.contains = n.contains.concat([s, a, i]),\n            o(n, \"shebang\", e.SHEBANG()), o(n, \"use_strict\", {\n              className: \"meta\", relevance: 10,\n              begin: /^\\s*['\"]use strict['\"]/\n            }), n.contains.find((e => \"func.def\" === e.label)).relevance = 0, Object.assign(n, {\n              name: \"TypeScript\", aliases: [\"ts\", \"tsx\"]\n            }), n\n      }, grmr_vbnet: e => {\n        const n = e.regex, t = /\\d{1,2}\\/\\d{1,2}\\/\\d{4}/, a = /\\d{4}-\\d{1,2}-\\d{1,2}/, i = /(\\d|1[012])(:\\d+){0,2} *(AM|PM)/, r = /\\d{1,2}(:\\d{1,2}){1,2}/, s = {\n          className: \"literal\", variants: [{ begin: n.concat(/# */, n.either(a, t), / *#/) }, {\n            begin: n.concat(/# */, r, / *#/)\n          }, { begin: n.concat(/# */, i, / *#/) }, {\n            begin: n.concat(/# */, n.either(a, t), / +/, n.either(i, r), / *#/)\n          }]\n        }, o = e.COMMENT(/'''/, /$/, {\n          contains: [{ className: \"doctag\", begin: /<\\/?/, end: />/ }]\n        }), l = e.COMMENT(null, /$/, { variants: [{ begin: /'/ }, { begin: /([\\t ]|^)REM(?=\\s)/ }] })\n          ; return {\n            name: \"Visual Basic .NET\", aliases: [\"vb\"], case_insensitive: !0,\n            classNameAliases: { label: \"symbol\" }, keywords: {\n              keyword: \"addhandler alias aggregate ansi as async assembly auto binary by byref byval call case catch class compare const continue custom declare default delegate dim distinct do each equals else elseif end enum erase error event exit explicit finally for friend from function get global goto group handles if implements imports in inherits interface into iterator join key let lib loop me mid module mustinherit mustoverride mybase myclass namespace narrowing new next notinheritable notoverridable of off on operator option optional order overloads overridable overrides paramarray partial preserve private property protected public raiseevent readonly redim removehandler resume return select set shadows shared skip static step stop structure strict sub synclock take text then throw to try unicode until using when where while widening with withevents writeonly yield\",\n              built_in: \"addressof and andalso await directcast gettype getxmlnamespace is isfalse isnot istrue like mod nameof new not or orelse trycast typeof xor cbool cbyte cchar cdate cdbl cdec cint clng cobj csbyte cshort csng cstr cuint culng cushort\",\n              type: \"boolean byte char date decimal double integer long object sbyte short single string uinteger ulong ushort\",\n              literal: \"true false nothing\"\n            },\n            illegal: \"//|\\\\{|\\\\}|endif|gosub|variant|wend|^\\\\$ \", contains: [{\n              className: \"string\", begin: /\"(\"\"|[^/n])\"C\\b/\n            }, {\n              className: \"string\", begin: /\"/,\n              end: /\"/, illegal: /\\n/, contains: [{ begin: /\"\"/ }]\n            }, s, {\n              className: \"number\", relevance: 0,\n              variants: [{\n                begin: /\\b\\d[\\d_]*((\\.[\\d_]+(E[+-]?[\\d_]+)?)|(E[+-]?[\\d_]+))[RFD@!#]?/\n              }, { begin: /\\b\\d[\\d_]*((U?[SIL])|[%&])?/ }, { begin: /&H[\\dA-F_]+((U?[SIL])|[%&])?/ }, {\n                begin: /&O[0-7_]+((U?[SIL])|[%&])?/\n              }, { begin: /&B[01_]+((U?[SIL])|[%&])?/ }]\n            }, {\n              className: \"label\", begin: /^\\w+:/\n            }, o, l, {\n              className: \"meta\",\n              begin: /[\\t ]*#(const|disable|else|elseif|enable|end|externalsource|if|region)\\b/,\n              end: /$/, keywords: {\n                keyword: \"const disable else elseif enable end externalsource if region then\"\n              },\n              contains: [l]\n            }]\n          }\n      }, grmr_wasm: e => {\n        e.regex; const n = e.COMMENT(/\\(;/, /;\\)/)\n          ; return n.contains.push(\"self\"), {\n            name: \"WebAssembly\", keywords: {\n              $pattern: /[\\w.]+/,\n              keyword: [\"anyfunc\", \"block\", \"br\", \"br_if\", \"br_table\", \"call\", \"call_indirect\", \"data\", \"drop\", \"elem\", \"else\", \"end\", \"export\", \"func\", \"global.get\", \"global.set\", \"local.get\", \"local.set\", \"local.tee\", \"get_global\", \"get_local\", \"global\", \"if\", \"import\", \"local\", \"loop\", \"memory\", \"memory.grow\", \"memory.size\", \"module\", \"mut\", \"nop\", \"offset\", \"param\", \"result\", \"return\", \"select\", \"set_global\", \"set_local\", \"start\", \"table\", \"tee_local\", \"then\", \"type\", \"unreachable\"]\n            }, contains: [e.COMMENT(/;;/, /$/), n, {\n              match: [/(?:offset|align)/, /\\s*/, /=/],\n              className: { 1: \"keyword\", 3: \"operator\" }\n            }, { className: \"variable\", begin: /\\$[\\w_]+/ }, {\n              match: /(\\((?!;)|\\))+/, className: \"punctuation\", relevance: 0\n            }, {\n              begin: [/(?:func|call|call_indirect)/, /\\s+/, /\\$[^\\s)]+/], className: {\n                1: \"keyword\",\n                3: \"title.function\"\n              }\n            }, e.QUOTE_STRING_MODE, {\n              match: /(i32|i64|f32|f64)(?!\\.)/,\n              className: \"type\"\n            }, {\n              className: \"keyword\",\n              match: /\\b(f32|f64|i32|i64)(?:\\.(?:abs|add|and|ceil|clz|const|convert_[su]\\/i(?:32|64)|copysign|ctz|demote\\/f64|div(?:_[su])?|eqz?|extend_[su]\\/i32|floor|ge(?:_[su])?|gt(?:_[su])?|le(?:_[su])?|load(?:(?:8|16|32)_[su])?|lt(?:_[su])?|max|min|mul|nearest|neg?|or|popcnt|promote\\/f32|reinterpret\\/[fi](?:32|64)|rem_[su]|rot[lr]|shl|shr_[su]|store(?:8|16|32)?|sqrt|sub|trunc(?:_[su]\\/f(?:32|64))?|wrap\\/i64|xor))\\b/\n            }, {\n              className: \"number\", relevance: 0,\n              match: /[+-]?\\b(?:\\d(?:_?\\d)*(?:\\.\\d(?:_?\\d)*)?(?:[eE][+-]?\\d(?:_?\\d)*)?|0x[\\da-fA-F](?:_?[\\da-fA-F])*(?:\\.[\\da-fA-F](?:_?[\\da-fA-D])*)?(?:[pP][+-]?\\d(?:_?\\d)*)?)\\b|\\binf\\b|\\bnan(?::0x[\\da-fA-F](?:_?[\\da-fA-D])*)?\\b/\n            }]\n          }\n      }, grmr_yaml: e => {\n        const n = \"true false yes no null\", t = \"[\\\\w#;/?:@&=+$,.~*'()[\\\\]]+\", a = {\n          className: \"string\", relevance: 0, variants: [{ begin: /'/, end: /'/ }, {\n            begin: /\"/, end: /\"/\n          }, { begin: /\\S+/ }], contains: [e.BACKSLASH_ESCAPE, {\n            className: \"template-variable\",\n            variants: [{ begin: /\\{\\{/, end: /\\}\\}/ }, { begin: /%\\{/, end: /\\}/ }]\n          }]\n        }, i = e.inherit(a, {\n          variants: [{ begin: /'/, end: /'/ }, { begin: /\"/, end: /\"/ }, { begin: /[^\\s,{}[\\]]+/ }]\n        }), r = {\n          end: \",\", endsWithParent: !0, excludeEnd: !0, keywords: n, relevance: 0\n        }, s = {\n          begin: /\\{/,\n          end: /\\}/, contains: [r], illegal: \"\\\\n\", relevance: 0\n        }, o = {\n          begin: \"\\\\[\", end: \"\\\\]\",\n          contains: [r], illegal: \"\\\\n\", relevance: 0\n        }, l = [{\n          className: \"attr\", variants: [{\n            begin: \"\\\\w[\\\\w :\\\\/.-]*:(?=[ \\t]|$)\"\n          }, { begin: '\"\\\\w[\\\\w :\\\\/.-]*\":(?=[ \\t]|$)' }, {\n            begin: \"'\\\\w[\\\\w :\\\\/.-]*':(?=[ \\t]|$)\"\n          }]\n        }, {\n          className: \"meta\", begin: \"^---\\\\s*$\",\n          relevance: 10\n        }, {\n          className: \"string\",\n          begin: \"[\\\\|>]([1-9]?[+-])?[ ]*\\\\n( +)[^ ][^\\\\n]*\\\\n(\\\\2[^\\\\n]+\\\\n?)*\"\n        }, {\n          begin: \"<%[%=-]?\", end: \"[%-]?%>\", subLanguage: \"ruby\", excludeBegin: !0, excludeEnd: !0,\n          relevance: 0\n        }, { className: \"type\", begin: \"!\\\\w+!\" + t }, {\n          className: \"type\",\n          begin: \"!<\" + t + \">\"\n        }, { className: \"type\", begin: \"!\" + t }, {\n          className: \"type\", begin: \"!!\" + t\n        }, { className: \"meta\", begin: \"&\" + e.UNDERSCORE_IDENT_RE + \"$\" }, {\n          className: \"meta\",\n          begin: \"\\\\*\" + e.UNDERSCORE_IDENT_RE + \"$\"\n        }, {\n          className: \"bullet\", begin: \"-(?=[ ]|$)\",\n          relevance: 0\n        }, e.HASH_COMMENT_MODE, { beginKeywords: n, keywords: { literal: n } }, {\n          className: \"number\",\n          begin: \"\\\\b[0-9]{4}(-[0-9][0-9]){0,2}([Tt \\\\t][0-9][0-9]?(:[0-9][0-9]){2})?(\\\\.[0-9]*)?([ \\\\t])*(Z|[-+][0-9][0-9]?(:[0-9][0-9])?)?\\\\b\"\n        }, { className: \"number\", begin: e.C_NUMBER_RE + \"\\\\b\", relevance: 0 }, s, o, a], c = [...l]\n          ; return c.pop(), c.push(i), r.contains = c, {\n            name: \"YAML\", case_insensitive: !0,\n            aliases: [\"yml\"], contains: l\n          }\n      }\n    }); const je = ne; for (const e of Object.keys(Ue)) {\n      const n = e.replace(\"grmr_\", \"\").replace(\"_\", \"-\"); je.registerLanguage(n, Ue[e])\n    }\n  return je\n}(); \"object\" == typeof exports && \"undefined\" != typeof module && (module.exports = hljs);\n\n\nvar waitForEl = function(selector, callback) {\n  if (jQuery(selector).length) {\n    callback();\n  } else {\n    setTimeout(function() {\n      waitForEl(selector, callback);\n    }, 100);\n  }\n};\n\nwaitForEl(\"#map_yaml\", function() {\n  var old_text = $(\"#map_yaml\").text()\n  var new_text = old_text.replace(/\\\\n/g, '\\n');\n  $(\"#map_yaml\").text(new_text)\n\n  hljs.highlightAll();\n});\n",
        "styles": ""
      },
      "pluginVersion": "9.5.2",
      "targets": [
        {
          "alias": "yaml",
          "datasource": {
            "type": "influxdb",
            "uid": "flb_influxdb"
          },
          "groupBy": [],
          "measurement": "flb_influxdb",
          "orderByTime": "ASC",
          "policy": "autogen",
          "query": "SELECT last(\"robot_name\") FROM \"autogen\".\"flb_influxdb\" WHERE $timeFilter",
          "rawQuery": false,
          "refId": "A",
          "resultFormat": "table",
          "select": [
            [
              {
                "params": [
                  "/map/base64/yaml"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": []
        }
      ],
      "title": "Map metadata",
      "transformations": [],
      "type": "marcusolsson-dynamictext-panel"
    }
  ],
  "refresh": "",
  "schemaVersion": 38,
  "style": "dark",
  "tags": [],
  "templating": {
    "list": []
  },
  "time": {
    "from": "now-1h",
    "to": "now"
  },
  "timepicker": {},
  "timezone": "",
  "title": "ROS 2 Data Collection - Environment",
  "uid": "bcd48967-2d49-4c3d-8091-ce6e71a8b009",
  "version": 2,
  "weekStart": ""
}
